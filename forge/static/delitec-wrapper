#!/usr/bin/env python

import os, sys
from sys import argv

import delitecommon

comps = ['apps','extern','shared','library','compiler']

## a forwarder to the delitec script in DELITE_HOME with neccesary classpaths for this forge-generated DSL
def main():
    usage = "usage: %prog <dsl runner> [delitec args]"

    if len(argv) < 2:
        exit("a dsl runner must be passed as an argument")

    dslRunner = argv[1]
    delitecommon.checkDeliteEnv()

    scala_major_id = delitecommon.scala_major_id
    script_home = delitecommon.script_home
    lib_home = delitecommon.lib_home
    DELITE_HOME = delitecommon.DELITE_HOME

    # DSL cps
    cp = ""
    for comp in comps:
      cp = cp + script_home + "/" + comp + "/target/" + scala_major_id + "/classes" + os.pathsep
    cp = cp + script_home + "/tests/target/" + scala_major_id + "/test-classes" + os.pathsep

    # add all managed libs 
    # caveat: scalatest pulls in some non-virtualized scala dependencies which conflict with the scala-virtualized versions
    jars = [os.path.join(d,f) for (d, n, fs) in os.walk(lib_home + "/lib_managed/") if not (d.count("/org.scala-lang/") > 0) for f in fs]
    for j in jars:
        cp = cp + j + os.pathsep

    # Delite
    cp = cp + DELITE_HOME + "/framework/target/" + scala_major_id + "/classes" + os.pathsep
    cp = cp + DELITE_HOME + "/framework/delite-test/target/" + scala_major_id + "/classes" + os.pathsep
    cp = cp + DELITE_HOME + "/runtime/target/" + scala_major_id + "/classes" + os.pathsep

    old_cp = os.getenv("CLASSPATH", "")
    os.putenv("CLASSPATH", old_cp + os.pathsep + cp)

    os.system(DELITE_HOME + "/bin/delitec " + dslRunner + " " + " ".join(argv[2:len(argv)]))


if __name__ == "__main__":
    main()
