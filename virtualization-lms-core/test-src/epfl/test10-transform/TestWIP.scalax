// add modular abstract interpretations (example: int ranges)

def createDefinition(sym, def) = {
  val (sym1, def1) = rewriteUntilConverged(sym, def)
  globalDefs ::= (sym1,def1)
}

def rewriteUntilConverged = ...


trait AbsIntDomain {
  val IR
  type Fact[T]
  val table: Map[Sym[_], Fact[_]]
  def unapply()
  def update(sym,def): Fact
}


trait MyAbstractInterpretation { self =>
  
  object MyAbsIntDomain extends AbsIntDomain {
    val IR = self
    
    def update(sym,def) = evalAbs(sym,def)
  }
  
  
  def evalAbs(sym,def) = def match {
    case Foo(MyAbsIntDomain(x),MyAbsIntDomain(y)) => foo(x,y)
  }
  
  
  
}
