-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Sym(0),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayIndex(Sym(4),Const(0)))
TP(Sym(6),ArrayLength(Sym(4)))
TP(Sym(8),ArrayIndex(Sym(4),Sym(7)))
TP(Sym(9),OrderingGT(Sym(8),Const(0)))
TP(Sym(10),IntPlus(Sym(8),Sym(5)))
TP(Sym(11),SingletonInLoop(Sym(10),Sym(7)))
TP(Sym(13),EmptyArrayInLoop(Sym(7),Sym(12)))
TP(Sym(14),IfThenElse(Sym(9),Block(Sym(11)),Block(Sym(13))))
TP(Sym(15),SimpleLoop(Sym(6),Sym(7),MultiArrayElem(Block(Sym(14)))))
TP(Sym(16),ArrayIndex(Sym(15),Const(0)))
TP(Sym(17),Reflect(Print(Sym(16)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(19),ArrayIndex(Sym(4),Sym(18)))
TP(Sym(20),IntPlus(Sym(19),Sym(5)))
TP(Sym(21),OrderingGT(Sym(20),Const(0)))
TP(Sym(22),Singleton(Sym(18)))
TP(Sym(24),EmptyArrayInLoop(Sym(18),Sym(23)))
TP(Sym(25),IfThenElse(Sym(21),Block(Sym(22)),Block(Sym(24))))
TP(Sym(26),SimpleLoop(Sym(6),Sym(18),MultiArrayElem(Block(Sym(25)))))
TP(Sym(27),ArrayIndex(Sym(26),Const(0)))
TP(Sym(28),Reflect(Print(Sym(27)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(17))))
TP(Sym(29),ArrayLength(Sym(15)))
TP(Sym(31),ArrayIndex(Sym(15),Sym(30)))
TP(Sym(32),IntPlus(Sym(31),Sym(30)))
TP(Sym(33),SingletonInLoop(Sym(32),Sym(30)))
TP(Sym(34),SimpleLoop(Sym(29),Sym(30),MultiArrayElem(Block(Sym(33)))))
TP(Sym(35),ArrayIndex(Sym(34),Const(0)))
TP(Sym(36),Reflect(Print(Sym(35)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(28))))
TP(Sym(37),Reify(Sym(36),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(17), Sym(28), Sym(36))))

-- before transformation
val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x6 = x4.length
val x5 = x4.apply(0)
val x15_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x7 <- 0 until x6) {
val x8 = x4.apply(x7)
val x9 = x8 > 0
if (x9) {
val x10 = x8 + x5
x15_builder += x10
}
}
val x15 = x15_builder.result()
val x16 = x15.apply(0)
val x17 = println(x16)
val x26_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x18 <- 0 until x6) {
val x19 = x4.apply(x18)
val x20 = x19 + x5
val x21 = x20 > 0
if (x21) {
x26_builder += x18
}
}
val x26 = x26_builder.result()
val x27 = x26.apply(0)
val x28 = println(x27)
val x29 = x15.length
val x34 = new Array[Int](x29)
for (x30 <- 0 until x29) {
val x31 = x15.apply(x30)
val x32 = x31 + x30
x34(x30) = x32
}
val x35 = x34.apply(0)
val x36 = println(x35)

-- vertical transformation

(VFT) No producers found for cons Sym(4)
(VFT) Replaced TP(Sym(6),ArrayLength(Sym(4))) with fixed length: Sym(0)

(VFT) Not fused prod Sym(4) with cons Sym(15) because consumer depends on producer through Sym(4)
(VFT) No producers found for cons Sym(15)
(VFT) Cons Sym(15) not fused but mirrored to Sym(38) because of previous substitutions or effects

(VFT) Not fused prod Sym(4) with cons Sym(26) because consumer depends on producer through Sym(4)
(VFT) No producers found for cons Sym(26)
(VFT) Cons Sym(26) not fused but mirrored to Sym(41) because of previous substitutions or effects

(VFT) Not fused prod Sym(15) with cons Sym(34) because consumer uses index in IntPlus(Sym(31),Sym(30)). Override ignoreIndex if the index value doesn't matter (e.g. the index is just used to keep a node inside the loop)
(VFT) No producers found for cons Sym(34)
(VFT) Cons Sym(34) not fused but mirrored to Sym(48) because of previous substitutions or effects

(VFT) all vertically fused: 

-- after vertical transformation
val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.apply(0)
val x38_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x7 <- 0 until x0) {
val x8 = x4.apply(x7)
val x9 = x8 > 0
if (x9) {
val x10 = x8 + x5
x38_builder += x10
}
}
val x38 = x38_builder.result()
val x39 = x38.apply(0)
val x40 = println(x39)
val x41_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x18 <- 0 until x0) {
val x19 = x4.apply(x18)
val x20 = x19 + x5
val x21 = x20 > 0
if (x21) {
x41_builder += x18
}
}
val x41 = x41_builder.result()
val x42 = x41.apply(0)
val x43 = println(x42)
val x44 = x38.length
val x48 = new Array[Int](x44)
for (x30 <- 0 until x44) {
val x45 = x38.apply(x30)
val x46 = x45 + x30
x48(x30) = x46
}
val x49 = x48.apply(0)
val x50 = println(x49)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) The candidate Sym(38) cannot be fused with the existing FusedLoopSet(shape = Sym(0), indexSym = Sym(1), loopSyms = List(Sym(4))) because the candidate set depends on Sym(4)
(HFT) Recording Sym(38), no fusion
  (HFT) Recording if-sym Sym(14), no fusion
(HFT) The candidate Sym(41) cannot be fused with the existing FusedLoopSet(shape = Sym(0), indexSym = Sym(1), loopSyms = List(Sym(4))) because the candidate set depends on Sym(4)
(HFT) Fusing Sym(41) with fusion set FusedLoopSet(shape = Sym(0), indexSym = Sym(7), loopSyms = List(Sym(38)))
(HFT) - remapping index: Sym(18) -> Sym(7)
  (HFT) Recording if-sym Sym(25), no fusion
  (HFT) - new if symbol: Sym(25) -> Sym(56)
(HFT) - new loop symbol: Sym(41) -> Sym(57)
(HFT) Recording Sym(48), no fusion

(HFT) all horizontally fused: List(Sym(38), Sym(57))

-- after horizontal transformation
val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.apply(0)
val x38_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x7 <- 0 until x0) {
val x8 = x4.apply(x7)
val x9 = x8 > 0
if (x9) {
val x10 = x8 + x5
x38_builder += x10
}
}
val x38 = x38_builder.result()
val x39 = x38.apply(0)
val x52 = println(x39)
val x57_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x7 <- 0 until x0) {
val x8 = x4.apply(x7)
val x10 = x8 + x5
val x53 = x10 > 0
if (x53) {
x57_builder += x7
}
}
val x57 = x57_builder.result()
val x58 = x57.apply(0)
val x59 = println(x58)
val x44 = x38.length
val x48 = new Array[Int](x44)
for (x30 <- 0 until x44) {
val x45 = x38.apply(x30)
val x46 = x45 + x30
x48(x30) = x46
}
val x49 = x48.apply(0)
val x60 = println(x49)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(38)),List(SimpleLoop(Sym(0),Sym(7),MultiArrayElem(Block(Sym(14))))),SimpleFatLoop(Sym(0),Sym(7),List(MultiArrayElem(Block(Sym(14))))))
TTP(List(Sym(57)),List(SimpleLoop(Sym(0),Sym(7),MultiArrayElem(Block(Sym(56))))),SimpleFatLoop(Sym(0),Sym(7),List(MultiArrayElem(Block(Sym(56))))))

val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.apply(0)
val x38_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x57_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x7 <- 0 until x0) {
val x8 = x4.apply(x7)
val x9 = x8 > 0
val x10 = x8 + x5
if (x9) {
x38_builder += x10
}
val x53 = x10 > 0
if (x53) {
x57_builder += x7
}
}
val x38 = x38_builder.result()
val x57 = x57_builder.result()
val x39 = x38.apply(0)
val x52 = println(x39)
val x58 = x57.apply(0)
val x59 = println(x58)
val x44 = x38.length
val x48 = new Array[Int](x44)
for (x30 <- 0 until x44) {
val x45 = x38.apply(x30)
val x46 = x45 + x30
x48(x30) = x46
}
val x49 = x48.apply(0)
val x60 = println(x49)
-- done
