-- full graph
TP(Sym(2),Reflect(Print(Const(1)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(3),IntPlus(Sym(1),Const(1)))
TP(Sym(4),Reify(Sym(3),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(2))))
TP(Sym(5),Reflect(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(6),ArrayLength(Sym(5)))
TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))
TP(Sym(9),IntPlus(Sym(8),Const(2)))
TP(Sym(10),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(9)))))
TP(Sym(11),ArrayLength(Sym(10)))
TP(Sym(13),ArrayIndex(Sym(10),Sym(12)))
TP(Sym(14),Reflect(Print(Sym(13)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(5))))
TP(Sym(15),IntPlus(Sym(12),Const(3)))
TP(Sym(16),Reify(Sym(15),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(14))))
TP(Sym(17),Reflect(SimpleLoop(Sym(11),Sym(12),ArrayElem(Block(Sym(16)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List(Sym(5))))
TP(Sym(18),ArrayIndex(Sym(10),Const(0)))
TP(Sym(19),Reflect(Print(Sym(18)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(17))))
TP(Sym(20),ArrayIndex(Sym(17),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(19))))
TP(Sym(22),Reify(Sym(21),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(5), Sym(17), Sym(19), Sym(21))))

-- before transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = println(1)
val x3 = x1 + 1
x5(x1) = x3
}
val x6 = x5.length
var x10 = new Array[Int](x6)
for (x7 <- 0 until x6) {
val x8 = x5.apply(x7)
val x9 = x8 + 2
x10(x7) = x9
}
val x11 = x10.length
var x17 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x10.apply(x12)
val x14 = println(x13)
val x15 = x12 + 3
x17(x12) = x15
}
val x18 = x10.apply(0)
val x19 = println(x18)
val x20 = x17.apply(0)
val x21 = println(x20)

-- vertical transformation

(VFT) No producers found for TP(Sym(5),Reflect(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))), ...)), changed to Sym(25) because of existing substitutions or to reflect effects
(VFT) Replaced TP(Sym(6),ArrayLength(Sym(5))) with fixed length: Const(100)

(VFT) Fusing consumer TP(Sym(10),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(9))))) with real producer: Sym(25) (was Sym(5))
(VFT) Combined effect of fused loop is: (Summary(true,false,false,false,false,false,List(),List(),List(),List()),List())
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(24).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) Finished fusion of prod: Sym(25) and cons: Sym(10), the resulting fused loop is Sym(27)
(VFT) Replaced TP(Sym(11),ArrayLength(Sym(10))) with fixed length: Const(100)

(VFT) Sym(17) not fused with Sym(10) because not indep (effectful consumer cannot be fused with effectful producer).
(VFT) No producers found for TP(Sym(17),Reflect(SimpleLoop(Sym(11),Sym(12),ArrayElem(Block(Sym(16)))), ...)), remapping to Sym(32) because of fixed shape

(VFT) all vertically fused: List(Sym(25), Sym(27))

-- after vertical transformation
var x25 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x3 = x1 + 1
val x23 = println(1)
x25(x1) = x3
}
var x27 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x3 = x1 + 1
val x26 = x3 + 2
x27(x1) = x26
}
var x32 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x28 = x27.apply(x1)
val x29 = println(x28)
val x30 = x1 + 3
x32(x1) = x30
}
val x33 = x27.apply(0)
val x34 = println(x33)
val x35 = x32.apply(0)
val x36 = println(x35)

-- horizontal transformation
(HFT) Recording Sym(25), no fusion
(HFT) - new loop symbol: Sym(25) -> Sym(41)
(HFT) Fusing Sym(27) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(25), Sym(27)))
(HFT) - already using same index Sym(1)
(HFT) - new loop symbol: Sym(27) -> Sym(42)
(HFT) The candidate Sym(32) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(25), Sym(27))) because the candidate set depends on Sym(25)
(HFT) Recording Sym(32), no fusion
(HFT) - new loop symbol: Sym(32) -> Sym(46)

(HFT) all horizontally fused: List(Sym(41), Sym(42))

-- after horizontal transformation
var x41 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x3 = x1 + 1
val x39 = println(1)
x41(x1) = x3
}
var x42 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x3 = x1 + 1
val x26 = x3 + 2
x42(x1) = x26
}
var x46 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x30 = x1 + 3
val x43 = x42.apply(x1)
val x44 = println(x43)
x46(x1) = x30
}
val x47 = x42.apply(0)
val x48 = println(x47)
val x49 = x46.apply(0)
val x50 = println(x49)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(41)),List(Reflect(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(40)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List())),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(40))))))
TTP(List(Sym(42)),List(Reflect(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(26)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List())),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(26))))))

var x41 = new Array[Int](100)
var x42 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x3 = x1 + 1
val x39 = println(1)
val x26 = x3 + 2
x41(x1) = x3
x42(x1) = x26
}
var x46 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x30 = x1 + 3
val x43 = x42.apply(x1)
val x44 = println(x43)
x46(x1) = x30
}
val x47 = x42.apply(0)
val x48 = println(x47)
val x49 = x46.apply(0)
val x50 = println(x49)
-- done
