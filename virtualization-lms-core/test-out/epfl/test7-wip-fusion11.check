-- full graph
TP(Sym(3),IntPlus(Sym(2),Sym(1)))
TP(Sym(4),SingletonInLoop(Sym(3),Sym(2)))
TP(Sym(5),SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(4)))))
TP(Sym(6),ArrayIndex(Sym(5),Const(0)))
TP(Sym(7),SingletonInLoop(Sym(6),Sym(1)))
TP(Sym(8),SimpleLoop(Const(90),Sym(1),MultiArrayElem(Block(Sym(7)))))
TP(Sym(10),IntPlus(Sym(9),Const(2)))
TP(Sym(11),SingletonInLoop(Sym(10),Sym(9)))
TP(Sym(12),SimpleLoop(Const(100),Sym(9),MultiArrayElem(Block(Sym(11)))))
TP(Sym(13),ArrayIndex(Sym(8),Const(0)))
TP(Sym(14),Reflect(Print(Sym(13)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(15),ArrayIndex(Sym(12),Const(0)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(14))))
TP(Sym(17),Reify(Sym(16),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(14), Sym(16))))

-- before transformation
val x8 = new Array[Int](90)
for (x1 <- 0 until 90) {
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + x1
x5(x2) = x3
}
val x6 = x5.apply(0)
x8(x1) = x6
}
val x13 = x8.apply(0)
val x14 = println(x13)
val x12 = new Array[Int](100)
for (x9 <- 0 until 100) {
val x10 = x9 + 2
x12(x9) = x10
}
val x15 = x12.apply(0)
val x16 = println(x15)

-- vertical transformation

(VFT) No producers found for cons Sym(8)
  
  (VFT) No producers found for cons Sym(5)

(VFT) No producers found for cons Sym(12)

(VFT) all vertically fused: 

-- after vertical transformation
val x8 = new Array[Int](90)
for (x1 <- 0 until 90) {
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + x1
x5(x2) = x3
}
val x6 = x5.apply(0)
x8(x1) = x6
}
val x13 = x8.apply(0)
val x18 = println(x13)
val x12 = new Array[Int](100)
for (x9 <- 0 until 100) {
val x10 = x9 + 2
x12(x9) = x10
}
val x15 = x12.apply(0)
val x19 = println(x15)

-- horizontal transformation
(HFT) Recording Sym(8), no fusion
  (HFT) Recording Sym(5), no fusion
(HFT) Recording Sym(12), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
val x8 = new Array[Int](90)
for (x1 <- 0 until 90) {
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + x1
x5(x2) = x3
}
val x6 = x5.apply(0)
x8(x1) = x6
}
val x13 = x8.apply(0)
val x21 = println(x13)
val x12 = new Array[Int](100)
for (x9 <- 0 until 100) {
val x10 = x9 + 2
x12(x9) = x10
}
val x15 = x12.apply(0)
val x22 = println(x15)

-- fusion
val x8 = new Array[Int](90)
for (x1 <- 0 until 90) {
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + x1
x5(x2) = x3
}
val x6 = x5.apply(0)
x8(x1) = x6
}
val x13 = x8.apply(0)
val x21 = println(x13)
val x12 = new Array[Int](100)
for (x9 <- 0 until 100) {
val x10 = x9 + 2
x12(x9) = x10
}
val x15 = x12.apply(0)
val x22 = println(x15)
-- done
