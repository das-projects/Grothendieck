-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(6),ArrayIndex(Sym(4),Sym(5)))
TP(Sym(7),IntPlus(Sym(6),Const(2)))
TP(Sym(8),SingletonInLoop(Sym(7),Sym(5)))
TP(Sym(9),SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(8)))))
TP(Sym(11),ArrayIndex(Sym(4),Sym(10)))
TP(Sym(12),IntPlus(Sym(11),Const(3)))
TP(Sym(13),SingletonInLoop(Sym(12),Sym(10)))
TP(Sym(14),SimpleLoop(Const(100),Sym(10),MultiArrayElem(Block(Sym(13)))))
TP(Sym(15),ArrayLength(Sym(4)))
TP(Sym(17),ArrayIndex(Sym(4),Sym(16)))
TP(Sym(18),IntPlus(Sym(17),Const(4)))
TP(Sym(19),SingletonInLoop(Sym(18),Sym(16)))
TP(Sym(20),SimpleLoop(Sym(15),Sym(16),MultiArrayElem(Block(Sym(19)))))
TP(Sym(21),ArrayIndex(Sym(9),Const(0)))
TP(Sym(22),Reflect(Print(Sym(21)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(23),ArrayIndex(Sym(14),Const(0)))
TP(Sym(24),Reflect(Print(Sym(23)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22))))
TP(Sym(25),ArrayIndex(Sym(20),Const(0)))
TP(Sym(26),Reflect(Print(Sym(25)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(24))))
TP(Sym(27),Reify(Sym(26),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22), Sym(24), Sym(26))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x9 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x4.apply(x5)
val x7 = x6 + 2
x9(x5) = x7
}
val x21 = x9.apply(0)
val x22 = println(x21)
val x14 = new Array[Int](100)
for (x10 <- 0 until 100) {
val x11 = x4.apply(x10)
val x12 = x11 + 3
x14(x10) = x12
}
val x23 = x14.apply(0)
val x24 = println(x23)
val x15 = x4.length
val x20 = new Array[Int](x15)
for (x16 <- 0 until x15) {
val x17 = x4.apply(x16)
val x18 = x17 + 4
x20(x16) = x18
}
val x25 = x20.apply(0)
val x26 = println(x25)

-- vertical transformation

(VFT) No producers found for cons Sym(4)

(VFT) Fusing prod Sym(4) with cons Sym(9). Type: Mc_McForRed(Sym(5),Sym(1),Const(100),Const(100),Single_McFor(Sym(5),(Sym(4),Sym(5)),Sym(2),Sym(8),Sym(3),Sym(9)),Sym(8),Sym(3),Sym(4),Sym(9))
(VFT) Fused prod Sym(4) with cons Sym(9), fused sym: Sym(30)

(VFT) Fusing prod Sym(4) with cons Sym(14). Type: Mc_McForRed(Sym(10),Sym(1),Const(100),Const(100),Single_McFor(Sym(10),(Sym(4),Sym(10)),Sym(2),Sym(13),Sym(3),Sym(14)),Sym(13),Sym(3),Sym(4),Sym(14))
(VFT) Fused prod Sym(4) with cons Sym(14), fused sym: Sym(35)
(VFT) Replaced TP(Sym(15),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) Fusing prod Sym(4) with cons Sym(20). Type: Mc_McForRed(Sym(16),Sym(1),Sym(15),Const(100),Single_McFor(Sym(16),(Sym(4),Sym(16)),Sym(2),Sym(19),Sym(3),Sym(20)),Sym(19),Sym(3),Sym(4),Sym(20))
(VFT) Fused prod Sym(4) with cons Sym(20), fused sym: Sym(40)

(VFT) all vertically fused: List(Sym(35), Sym(30), Sym(4), Sym(40))

-- after vertical transformation
val x30 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x2 + 2
x30(x1) = x28
}
val x31 = x30.apply(0)
val x32 = println(x31)
val x35 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x33 = x2 + 3
x35(x1) = x33
}
val x36 = x35.apply(0)
val x37 = println(x36)
val x40 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x38 = x2 + 4
x40(x1) = x38
}
val x41 = x40.apply(0)
val x42 = println(x41)

-- horizontal transformation
(HFT) Recording Sym(30), no fusion
(HFT) Fusing Sym(35) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(40), Sym(20), Sym(35), Sym(14), Sym(30), Sym(4), Sym(9)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(40) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(40), Sym(20), Sym(35), Sym(14), Sym(30), Sym(4), Sym(9)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(30), Sym(35), Sym(40))

-- after horizontal transformation
val x30 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x2 + 2
x30(x1) = x28
}
val x31 = x30.apply(0)
val x44 = println(x31)
val x35 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x33 = x2 + 3
x35(x1) = x33
}
val x36 = x35.apply(0)
val x45 = println(x36)
val x40 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x38 = x2 + 4
x40(x1) = x38
}
val x41 = x40.apply(0)
val x46 = println(x41)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(30)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(29))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(29))))))
TTP(List(Sym(35)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(34))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(34))))))
TTP(List(Sym(40)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(39))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(39))))))

val x30 = new Array[Int](100)
val x35 = new Array[Int](100)
val x40 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x2 + 2
val x33 = x2 + 3
val x38 = x2 + 4
x30(x1) = x28
x35(x1) = x33
x40(x1) = x38
}
val x31 = x30.apply(0)
val x44 = println(x31)
val x36 = x35.apply(0)
val x45 = println(x36)
val x41 = x40.apply(0)
val x46 = println(x41)
-- done
