-- full graph
TP(Sym(3),IntPlus(Sym(2),Sym(1)))
TP(Sym(4),SingletonInLoop(Sym(3),Sym(2)))
TP(Sym(5),SimpleLoop(Const(80),Sym(2),MultiArrayElem(Block(Sym(4)))))
TP(Sym(7),IntTimes(Sym(6),Sym(1)))
TP(Sym(8),SingletonInLoop(Sym(7),Sym(6)))
TP(Sym(9),SimpleLoop(Const(80),Sym(6),MultiArrayElem(Block(Sym(8)))))
TP(Sym(10),ArrayIndex(Sym(5),Const(0)))
TP(Sym(11),IntTimes(Sym(1),Sym(10)))
TP(Sym(12),ArrayIndex(Sym(9),Const(0)))
TP(Sym(13),IntTimes(Sym(11),Sym(12)))
TP(Sym(14),SingletonInLoop(Sym(13),Sym(1)))
TP(Sym(15),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(14)))))
TP(Sym(16),ArrayIndex(Sym(15),Const(0)))
TP(Sym(17),Reflect(Print(Sym(16)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(18),Reify(Sym(17),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(17))))

-- before transformation
val x15 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x5 = new Array[Int](80)
for (x2 <- 0 until 80) {
val x3 = x2 + x1
x5(x2) = x3
}
val x10 = x5.apply(0)
val x11 = x1 * x10
val x9 = new Array[Int](80)
for (x6 <- 0 until 80) {
val x7 = x6 * x1
x9(x6) = x7
}
val x12 = x9.apply(0)
val x13 = x11 * x12
x15(x1) = x13
}
val x16 = x15.apply(0)
val x17 = println(x16)

-- vertical transformation

(VFT) No producers found for cons Sym(15)
  
  (VFT) No producers found for cons Sym(5)
  
  (VFT) No producers found for cons Sym(9)
  (VFT) Cons Sym(9) not fused but mirrored to Sym(21) because of fixed shape
(VFT) Cons Sym(15) not fused but mirrored to Sym(25) because of previous substitutions or effects

(VFT) all vertically fused: 

-- after vertical transformation
val x25 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x5 = new Array[Int](80)
for (x2 <- 0 until 80) {
val x3 = x2 + x1
x5(x2) = x3
}
val x10 = x5.apply(0)
val x11 = x1 * x10
val x21 = new Array[Int](80)
for (x2 <- 0 until 80) {
val x19 = x2 * x1
x21(x2) = x19
}
val x22 = x21.apply(0)
val x23 = x11 * x22
x25(x1) = x23
}
val x26 = x25.apply(0)
val x27 = println(x26)

-- horizontal transformation
(HFT) Recording Sym(25), no fusion
  (HFT) Recording Sym(5), no fusion
  (HFT) Fusing Sym(21) with fusion set FusedLoopSet(shape = Const(80), indexSym = Sym(2), loopSyms = List(Sym(5)))
  (HFT) - already using same index Sym(2)

(HFT) all horizontally fused: List(Sym(5), Sym(21))

-- after horizontal transformation
val x25 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x5 = new Array[Int](80)
for (x2 <- 0 until 80) {
val x3 = x2 + x1
x5(x2) = x3
}
val x10 = x5.apply(0)
val x11 = x1 * x10
val x21 = new Array[Int](80)
for (x2 <- 0 until 80) {
val x19 = x2 * x1
x21(x2) = x19
}
val x22 = x21.apply(0)
val x23 = x11 * x22
x25(x1) = x23
}
val x26 = x25.apply(0)
val x29 = println(x26)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(5)),List(SimpleLoop(Const(80),Sym(2),MultiArrayElem(Block(Sym(4))))),SimpleFatLoop(Const(80),Sym(2),List(MultiArrayElem(Block(Sym(4))))))
TTP(List(Sym(21)),List(SimpleLoop(Const(80),Sym(2),MultiArrayElem(Block(Sym(20))))),SimpleFatLoop(Const(80),Sym(2),List(MultiArrayElem(Block(Sym(20))))))

val x25 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x5 = new Array[Int](80)
val x21 = new Array[Int](80)
for (x2 <- 0 until 80) {
val x3 = x2 + x1
val x19 = x2 * x1
x5(x2) = x3
x21(x2) = x19
}
val x10 = x5.apply(0)
val x11 = x1 * x10
val x22 = x21.apply(0)
val x23 = x11 * x22
x25(x1) = x23
}
val x26 = x25.apply(0)
val x29 = println(x26)
-- done
