-- full graph
TP(Sym(3),IntPlus(Sym(2),Const(1)))
TP(Sym(4),IntPlus(Sym(3),Sym(1)))
TP(Sym(5),SingletonInLoop(Sym(4),Sym(2)))
TP(Sym(6),SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(5)))))
TP(Sym(8),IntPlus(Sym(7),Const(2)))
TP(Sym(9),IntPlus(Sym(8),Sym(1)))
TP(Sym(10),SingletonInLoop(Sym(9),Sym(7)))
TP(Sym(11),SimpleLoop(Const(100),Sym(7),MultiArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayLength(Sym(11)))
TP(Sym(14),ArrayIndex(Sym(11),Sym(13)))
TP(Sym(15),IntPlus(Sym(14),Const(3)))
TP(Sym(16),SingletonInLoop(Sym(15),Sym(13)))
TP(Sym(17),SimpleLoop(Sym(12),Sym(13),MultiArrayElem(Block(Sym(16)))))
TP(Sym(18),ArrayIndex(Sym(6),Const(0)))
TP(Sym(19),ArrayIndex(Sym(11),Const(0)))
TP(Sym(20),IntPlus(Sym(18),Sym(19)))
TP(Sym(21),ArrayIndex(Sym(17),Const(0)))
TP(Sym(22),IntPlus(Sym(20),Sym(21)))
TP(Sym(23),SingletonInLoop(Sym(22),Sym(1)))
TP(Sym(24),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(23)))))
TP(Sym(25),ArrayIndex(Sym(24),Const(0)))
TP(Sym(26),Reflect(Print(Sym(25)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(27),Reify(Sym(26),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(26))))

-- before transformation
val x24 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x6 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 1
val x4 = x3 + x1
x6(x2) = x4
}
val x18 = x6.apply(0)
val x11 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x7 + 2
val x9 = x8 + x1
x11(x7) = x9
}
val x19 = x11.apply(0)
val x20 = x18 + x19
val x12 = x11.length
val x17 = new Array[Int](x12)
for (x13 <- 0 until x12) {
val x14 = x11.apply(x13)
val x15 = x14 + 3
x17(x13) = x15
}
val x21 = x17.apply(0)
val x22 = x20 + x21
x24(x1) = x22
}
val x25 = x24.apply(0)
val x26 = println(x25)

-- vertical transformation

(VFT) No producers found for cons Sym(24)
  
  (VFT) No producers found for cons Sym(6)
  
  (VFT) No producers found for cons Sym(11)
  (VFT) Cons Sym(11) not fused but mirrored to Sym(31) because of fixed shape
  (VFT) Replaced TP(Sym(12),ArrayLength(Sym(11))) with fixed length: Const(100)
  
  (VFT) Fusing prod Sym(31) with cons Sym(17). Type: Mc_McForRed(Sym(13),Sym(2),Sym(12),Const(100),Single_McFor(Sym(13),(Sym(11),Sym(13)),Sym(29),Sym(16),Sym(30),Sym(17)),Sym(16),Sym(30),Sym(31),Sym(17))
  (VFT) Fused prod Sym(31) with cons Sym(17), fused sym: Sym(36)
(VFT) Cons Sym(24) not fused but mirrored to Sym(40) because of previous substitutions or effects

(VFT) all vertically fused: List(Sym(31), Sym(36))

-- after vertical transformation
val x40 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x6 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 1
val x4 = x3 + x1
x6(x2) = x4
}
val x18 = x6.apply(0)
val x31 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x28 = x2 + 2
val x29 = x28 + x1
x31(x2) = x29
}
val x32 = x31.apply(0)
val x33 = x18 + x32
val x36 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x28 = x2 + 2
val x29 = x28 + x1
val x34 = x29 + 3
x36(x2) = x34
}
val x37 = x36.apply(0)
val x38 = x33 + x37
x40(x1) = x38
}
val x41 = x40.apply(0)
val x42 = println(x41)

-- horizontal transformation
(HFT) Recording Sym(40), no fusion
  (HFT) Recording Sym(6), no fusion
  (HFT) Fusing Sym(31) with fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(2), loopSyms = List(Sym(6)))
  (HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(36) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(2), loopSyms = List(Sym(6), Sym(36), Sym(31), Sym(17)))
  (HFT) - already using same index Sym(2)

(HFT) all horizontally fused: List(Sym(6), Sym(31), Sym(36))

-- after horizontal transformation
val x40 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x6 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 1
val x4 = x3 + x1
x6(x2) = x4
}
val x18 = x6.apply(0)
val x31 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x28 = x2 + 2
val x29 = x28 + x1
x31(x2) = x29
}
val x32 = x31.apply(0)
val x33 = x18 + x32
val x36 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x28 = x2 + 2
val x29 = x28 + x1
val x34 = x29 + 3
x36(x2) = x34
}
val x37 = x36.apply(0)
val x38 = x33 + x37
x40(x1) = x38
}
val x41 = x40.apply(0)
val x44 = println(x41)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(6)),List(SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(5))))),SimpleFatLoop(Const(100),Sym(2),List(MultiArrayElem(Block(Sym(5))))))
TTP(List(Sym(31)),List(SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(30))))),SimpleFatLoop(Const(100),Sym(2),List(MultiArrayElem(Block(Sym(30))))))
TTP(List(Sym(36)),List(SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(35))))),SimpleFatLoop(Const(100),Sym(2),List(MultiArrayElem(Block(Sym(35))))))

val x40 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x6 = new Array[Int](100)
val x31 = new Array[Int](100)
val x36 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 1
val x4 = x3 + x1
val x28 = x2 + 2
val x29 = x28 + x1
val x34 = x29 + 3
x6(x2) = x4
x31(x2) = x29
x36(x2) = x34
}
val x18 = x6.apply(0)
val x32 = x31.apply(0)
val x33 = x18 + x32
val x37 = x36.apply(0)
val x38 = x33 + x37
x40(x1) = x38
}
val x41 = x40.apply(0)
val x44 = println(x41)
-- done
