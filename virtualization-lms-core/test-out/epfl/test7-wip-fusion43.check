-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(6),IntPlus(Sym(5),Const(2)))
TP(Sym(7),SingletonInLoop(Sym(6),Sym(5)))
TP(Sym(8),SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(7)))))
TP(Sym(9),ArrayLength(Sym(8)))
TP(Sym(11),ArrayIndex(Sym(8),Sym(10)))
TP(Sym(12),IntPlus(Sym(11),Const(3)))
TP(Sym(13),SingletonInLoop(Sym(12),Sym(10)))
TP(Sym(14),SimpleLoop(Sym(9),Sym(10),MultiArrayElem(Block(Sym(13)))))
TP(Sym(16),ArrayIndex(Sym(4),Sym(15)))
TP(Sym(17),ArrayIndex(Sym(14),Sym(15)))
TP(Sym(18),IntPlus(Sym(16),Sym(17)))
TP(Sym(19),SingletonInLoop(Sym(18),Sym(15)))
TP(Sym(20),SimpleLoop(Const(100),Sym(15),MultiArrayElem(Block(Sym(19)))))
TP(Sym(22),ArrayIndex(Sym(8),Sym(21)))
TP(Sym(23),IntPlus(Sym(22),Const(4)))
TP(Sym(24),ArrayIndex(Sym(4),Const(0)))
TP(Sym(25),IntPlus(Sym(23),Sym(24)))
TP(Sym(26),SingletonInLoop(Sym(25),Sym(21)))
TP(Sym(27),SimpleLoop(Sym(9),Sym(21),MultiArrayElem(Block(Sym(26)))))
TP(Sym(28),ArrayIndex(Sym(20),Const(0)))
TP(Sym(29),Reflect(Print(Sym(28)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(30),ArrayIndex(Sym(27),Const(0)))
TP(Sym(31),Reflect(Print(Sym(30)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(29))))
TP(Sym(32),Reify(Sym(31),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(29), Sym(31))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x8 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
x8(x5) = x6
}
val x9 = x8.length
val x14 = new Array[Int](x9)
for (x10 <- 0 until x9) {
val x11 = x8.apply(x10)
val x12 = x11 + 3
x14(x10) = x12
}
val x20 = new Array[Int](100)
for (x15 <- 0 until 100) {
val x16 = x4.apply(x15)
val x17 = x14.apply(x15)
val x18 = x16 + x17
x20(x15) = x18
}
val x28 = x20.apply(0)
val x29 = println(x28)
val x24 = x4.apply(0)
val x27 = new Array[Int](x9)
for (x21 <- 0 until x9) {
val x22 = x8.apply(x21)
val x23 = x22 + 4
val x25 = x23 + x24
x27(x21) = x25
}
val x30 = x27.apply(0)
val x31 = println(x30)

-- vertical transformation

(VFT) No producers found for cons Sym(4)

(VFT) No producers found for cons Sym(8)
(VFT) Cons Sym(8) not fused but mirrored to Sym(35) because of fixed shape
(VFT) Replaced TP(Sym(9),ArrayLength(Sym(8))) with fixed length: Const(100)

(VFT) Fusing prod Sym(35) with cons Sym(14). Type: Mc_McForRed(Sym(10),Sym(1),Sym(9),Const(100),Single_McFor(Sym(10),(Sym(8),Sym(10)),Sym(33),Sym(13),Sym(34),Sym(14)),Sym(13),Sym(34),Sym(35),Sym(14))
(VFT) Fused prod Sym(35) with cons Sym(14), fused sym: Sym(38)

(VFT) Fusing prod Sym(4) with cons Sym(20) and other prods: List(Sym(14)). Type: ManyMcsingle_McFor(Sym(15),Sym(1),(Sym(4),Sym(15)),Sym(2),List(((Sym(14),Sym(15)),Sym(36))),Sym(4),Sym(20),List())
(VFT) Fused prod Sym(4) and other prods List(Sym(14)) with cons Sym(20), fused sym: Sym(41)

(VFT) Not fused prod Sym(8) with cons Sym(27) because consumer depends on producer through Sym(35)
(VFT) No producers found for cons Sym(27)
(VFT) Cons Sym(27) not fused but mirrored to Sym(48) because of fixed shape

(VFT) all vertically fused: List(Sym(35), Sym(4), Sym(38), Sym(41))

-- after vertical transformation
val x41 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x33 = x1 + 2
val x36 = x33 + 3
val x39 = x2 + x36
x41(x1) = x39
}
val x42 = x41.apply(0)
val x43 = println(x42)
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x24 = x4.apply(0)
val x35 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x33 = x1 + 2
x35(x1) = x33
}
val x48 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x44 = x35.apply(x1)
val x45 = x44 + 4
val x46 = x45 + x24
x48(x1) = x46
}
val x49 = x48.apply(0)
val x50 = println(x49)

-- horizontal transformation
(HFT) Recording Sym(41), no fusion
(HFT) Fusing Sym(4) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(41), Sym(4), Sym(20), Sym(38), Sym(35), Sym(14)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(35) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(41), Sym(4), Sym(20), Sym(38), Sym(35), Sym(14)))
(HFT) - already using same index Sym(1)
(HFT) The candidate Sym(48) cannot be fused with the existing FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(41), Sym(4), Sym(20), Sym(38), Sym(35), Sym(14))) because the candidate set depends on Sym(35)
(HFT) Recording Sym(48), no fusion

(HFT) all horizontally fused: List(Sym(41), Sym(4), Sym(35))

-- after horizontal transformation
val x41 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x33 = x1 + 2
val x36 = x33 + 3
val x39 = x2 + x36
x41(x1) = x39
}
val x42 = x41.apply(0)
val x52 = println(x42)
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x24 = x4.apply(0)
val x35 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x33 = x1 + 2
x35(x1) = x33
}
val x48 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x44 = x35.apply(x1)
val x45 = x44 + 4
val x46 = x45 + x24
x48(x1) = x46
}
val x49 = x48.apply(0)
val x53 = println(x49)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(41)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(40))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(40))))))
TTP(List(Sym(4)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(3))))))
TTP(List(Sym(35)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(34))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(34))))))

val x41 = new Array[Int](100)
val x4 = new Array[Int](100)
val x35 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x33 = x1 + 2
val x36 = x33 + 3
val x39 = x2 + x36
x41(x1) = x39
x4(x1) = x2
x35(x1) = x33
}
val x42 = x41.apply(0)
val x52 = println(x42)
val x24 = x4.apply(0)
val x48 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x44 = x35.apply(x1)
val x45 = x44 + 4
val x46 = x45 + x24
x48(x1) = x46
}
val x49 = x48.apply(0)
val x53 = println(x49)
-- done
