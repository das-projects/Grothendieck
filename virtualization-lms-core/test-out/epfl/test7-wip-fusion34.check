-- full graph
TP(Sym(3),IntPlus(Sym(1),Sym(2)))
TP(Sym(4),SingletonInLoop(Sym(3),Sym(2)))
TP(Sym(5),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(4)))))
TP(Sym(6),SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(5)))))
TP(Sym(7),ArrayLength(Sym(6)))
TP(Sym(9),ArrayIndex(Sym(6),Sym(8)))
TP(Sym(11),IntPlus(Sym(9),Sym(10)))
TP(Sym(12),SingletonInLoop(Sym(11),Sym(10)))
TP(Sym(13),SimpleLoop(Sym(9),Sym(10),MultiArrayElem(Block(Sym(12)))))
TP(Sym(14),SimpleLoop(Sym(7),Sym(8),MultiArrayElem(Block(Sym(13)))))
TP(Sym(15),ArrayLength(Sym(14)))
TP(Sym(17),ArrayIndex(Sym(14),Sym(16)))
TP(Sym(18),IntPlus(Sym(17),Const(4)))
TP(Sym(19),SingletonInLoop(Sym(18),Sym(16)))
TP(Sym(20),SimpleLoop(Sym(15),Sym(16),MultiArrayElem(Block(Sym(19)))))
TP(Sym(21),ArrayIndex(Sym(6),Const(0)))
TP(Sym(22),Reflect(Print(Sym(21)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(23),ArrayIndex(Sym(14),Const(0)))
TP(Sym(24),Reflect(Print(Sym(23)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22))))
TP(Sym(25),ArrayIndex(Sym(20),Const(0)))
TP(Sym(26),Reflect(Print(Sym(25)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(24))))
TP(Sym(27),Reify(Sym(26),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22), Sym(24), Sym(26))))

-- before transformation
val x6_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x5 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x5(x2) = x3
}
x6_builder ++= x5
}
val x6 = x6_builder.result()
val x21 = x6.apply(0)
val x22 = println(x21)
val x7 = x6.length
val x14_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x8 <- 0 until x7) {
val x9 = x6.apply(x8)
val x13 = new Array[Int](x9)
for (x10 <- 0 until x9) {
val x11 = x9 + x10
x13(x10) = x11
}
x14_builder ++= x13
}
val x14 = x14_builder.result()
val x23 = x14.apply(0)
val x24 = println(x23)
val x15 = x14.length
val x20 = new Array[Int](x15)
for (x16 <- 0 until x15) {
val x17 = x14.apply(x16)
val x18 = x17 + 4
x20(x16) = x18
}
val x25 = x20.apply(0)
val x26 = println(x25)

-- vertical transformation

(VFT) No producers found for cons Sym(6)
  
  (VFT) No producers found for cons Sym(5)

(VFT) Fusing prod Sym(6) with cons Sym(14). Type: Mc_McForRed(Sym(8),Sym(1),Sym(7),Const(30),Mc_McForRed(Sym(8),Sym(2),Sym(7),Const(10),Single_McFor(Sym(8),(Sym(6),Sym(8)),Sym(3),Sym(13),Sym(4),Sym(14)),Sym(13),Sym(4),Sym(5),Sym(14)),Sym(13),Sym(5),Sym(6),Sym(14))
  
  (VFT) No producers found for cons Sym(13)
  (VFT) Cons Sym(13) not fused but mirrored to Sym(31) because of previous substitutions or effects
(VFT) Fused prod Sym(6) with cons Sym(14), fused sym: Sym(33)

(VFT) Fusing prod Sym(33) with cons Sym(20). Type: Mc_McForRed(Sym(16),Sym(1),Sym(15),Const(30),Mc_McForRed(Sym(16),Sym(2),Sym(15),Const(10),Mc_McForRed(Sym(16),Sym(10),Sym(15),Sym(3),Single_McFor(Sym(16),(Sym(14),Sym(16)),Sym(29),Sym(19),Sym(30),Sym(20)),Sym(19),Sym(30),Sym(31),Sym(20)),Sym(19),Sym(31),Sym(32),Sym(20)),Sym(19),Sym(32),Sym(33),Sym(20))
(VFT) Fused prod Sym(33) with cons Sym(20), fused sym: Sym(41)

(VFT) all vertically fused: List(Sym(32), Sym(5), Sym(40))
List(Sym(33), Sym(6), Sym(41))
List(Sym(31), Sym(39))

-- after vertical transformation
val x6_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x5 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x5(x2) = x3
}
x6_builder ++= x5
}
val x6 = x6_builder.result()
val x21 = x6.apply(0)
val x28 = println(x21)
val x33_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x32_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x31 = new Array[Int](x3)
for (x10 <- 0 until x3) {
val x29 = x3 + x10
x31(x10) = x29
}
x32_builder ++= x31
}
val x32 = x32_builder.result()
x33_builder ++= x32
}
val x33 = x33_builder.result()
val x34 = x33.apply(0)
val x35 = println(x34)
val x41_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x40_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x39 = new Array[Int](x3)
for (x10 <- 0 until x3) {
val x29 = x3 + x10
val x37 = x29 + 4
x39(x10) = x37
}
x40_builder ++= x39
}
val x40 = x40_builder.result()
x41_builder ++= x40
}
val x41 = x41_builder.result()
val x42 = x41.apply(0)
val x43 = println(x42)

-- horizontal transformation
(HFT) Recording Sym(6), no fusion
  (HFT) Recording Sym(5), no fusion
(HFT) Fusing Sym(33) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(41), Sym(20), Sym(33), Sym(6), Sym(14)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(32) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(40), Sym(5), Sym(32)))
  (HFT) - already using same index Sym(2)
    (HFT) Recording Sym(31), no fusion
(HFT) Fusing Sym(41) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(41), Sym(20), Sym(33), Sym(6), Sym(14)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(40) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(40), Sym(5), Sym(32)))
  (HFT) - already using same index Sym(2)
    (HFT) Fusing Sym(39) with containing fusion set FusedLoopSet(shape = Sym(3), indexSym = Sym(10), loopSyms = List(Sym(31), Sym(39)))
    (HFT) - already using same index Sym(10)

(HFT) all horizontally fused: List(Sym(31), Sym(39))
List(Sym(5), Sym(32), Sym(40))
List(Sym(6), Sym(33), Sym(41))

-- after horizontal transformation
val x6_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x5 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x5(x2) = x3
}
x6_builder ++= x5
}
val x6 = x6_builder.result()
val x21 = x6.apply(0)
val x45 = println(x21)
val x33_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x32_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x31 = new Array[Int](x3)
for (x10 <- 0 until x3) {
val x29 = x3 + x10
x31(x10) = x29
}
x32_builder ++= x31
}
val x32 = x32_builder.result()
x33_builder ++= x32
}
val x33 = x33_builder.result()
val x34 = x33.apply(0)
val x46 = println(x34)
val x41_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x40_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x39 = new Array[Int](x3)
for (x10 <- 0 until x3) {
val x29 = x3 + x10
val x37 = x29 + 4
x39(x10) = x37
}
x40_builder ++= x39
}
val x40 = x40_builder.result()
x41_builder ++= x40
}
val x41 = x41_builder.result()
val x42 = x41.apply(0)
val x47 = println(x42)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(6)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(5))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(5))))))
TTP(List(Sym(33)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(32))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(32))))))
TTP(List(Sym(41)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(40))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(40))))))

(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(31)),List(SimpleLoop(Sym(3),Sym(10),MultiArrayElem(Block(Sym(30))))),SimpleFatLoop(Sym(3),Sym(10),List(MultiArrayElem(Block(Sym(30))))))
TTP(List(Sym(39)),List(SimpleLoop(Sym(3),Sym(10),MultiArrayElem(Block(Sym(38))))),SimpleFatLoop(Sym(3),Sym(10),List(MultiArrayElem(Block(Sym(38))))))

(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(5)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(4))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(4))))))
TTP(List(Sym(32)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(31))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(31))))))
TTP(List(Sym(40)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(39))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(39))))))

val x6_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x33_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x41_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
val x5 = new Array[Int](10)
val x32_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x40_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x31 = new Array[Int](x3)
val x39 = new Array[Int](x3)
for (x10 <- 0 until x3) {
val x29 = x3 + x10
val x37 = x29 + 4
x31(x10) = x29
x39(x10) = x37
}
x5(x2) = x3
x32_builder ++= x31
x40_builder ++= x39
}
val x32 = x32_builder.result()
val x40 = x40_builder.result()
x6_builder ++= x5
x33_builder ++= x32
x41_builder ++= x40
}
val x6 = x6_builder.result()
val x33 = x33_builder.result()
val x41 = x41_builder.result()
val x21 = x6.apply(0)
val x45 = println(x21)
val x34 = x33.apply(0)
val x46 = println(x34)
val x42 = x41.apply(0)
val x47 = println(x42)
-- done
