-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayLength(Sym(4)))
TP(Sym(7),ArrayIndex(Sym(4),Sym(6)))
TP(Sym(8),IntPlus(Sym(7),Const(1)))
TP(Sym(9),SingletonInLoop(Sym(8),Sym(6)))
TP(Sym(10),SimpleLoop(Sym(5),Sym(6),MultiArrayElem(Block(Sym(9)))))
TP(Sym(11),ArrayIndex(Sym(4),Const(0)))
TP(Sym(12),Reflect(Print(Sym(11)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(13),ArrayIndex(Sym(10),Const(0)))
TP(Sym(14),Reflect(Print(Sym(13)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(12))))
TP(Sym(15),Reify(Sym(14),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(12), Sym(14))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x11 = x4.apply(0)
val x12 = println(x11)
val x5 = x4.length
val x10 = new Array[Int](x5)
for (x6 <- 0 until x5) {
val x7 = x4.apply(x6)
val x8 = x7 + 1
x10(x6) = x8
}
val x13 = x10.apply(0)
val x14 = println(x13)

-- vertical transformation

(VFT) No producers found for cons Sym(4)
(VFT) Replaced TP(Sym(5),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) Fusing prod Sym(4) with cons Sym(10). Type: Mc_McForRed(Sym(6),Sym(1),Sym(5),Const(100),Single_McFor(Sym(6),(Sym(4),Sym(6)),Sym(2),Sym(9),Sym(3),Sym(10)),Sym(9),Sym(3),Sym(4),Sym(10))
(VFT) Fused prod Sym(4) with cons Sym(10), fused sym: Sym(19)

(VFT) all vertically fused: List(Sym(4), Sym(19))

-- after vertical transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x11 = x4.apply(0)
val x16 = println(x11)
val x19 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x17 = x2 + 1
x19(x1) = x17
}
val x20 = x19.apply(0)
val x21 = println(x20)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(19) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(19), Sym(4), Sym(10)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(4), Sym(19))

-- after horizontal transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x11 = x4.apply(0)
val x23 = println(x11)
val x19 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x17 = x2 + 1
x19(x1) = x17
}
val x20 = x19.apply(0)
val x24 = println(x20)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(3))))))
TTP(List(Sym(19)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(18))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(18))))))

val x4 = new Array[Int](100)
val x19 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x17 = x2 + 1
x4(x1) = x2
x19(x1) = x17
}
val x11 = x4.apply(0)
val x23 = println(x11)
val x20 = x19.apply(0)
val x24 = println(x20)
-- done
