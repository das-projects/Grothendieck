-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(6),IntPlus(Sym(5),Const(2)))
TP(Sym(7),SingletonInLoop(Sym(6),Sym(5)))
TP(Sym(8),SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(7)))))
TP(Sym(9),ArrayLength(Sym(8)))
TP(Sym(11),ArrayIndex(Sym(8),Sym(10)))
TP(Sym(12),IntPlus(Sym(11),Const(3)))
TP(Sym(13),SingletonInLoop(Sym(12),Sym(10)))
TP(Sym(14),SimpleLoop(Sym(9),Sym(10),MultiArrayElem(Block(Sym(13)))))
TP(Sym(15),ArrayLength(Sym(4)))
TP(Sym(17),ArrayIndex(Sym(4),Sym(16)))
TP(Sym(18),ArrayIndex(Sym(8),Sym(16)))
TP(Sym(19),IntPlus(Sym(17),Sym(18)))
TP(Sym(20),ArrayIndex(Sym(8),Const(0)))
TP(Sym(21),IntPlus(Sym(19),Sym(20)))
TP(Sym(22),SingletonInLoop(Sym(21),Sym(16)))
TP(Sym(23),SimpleLoop(Sym(15),Sym(16),MultiArrayElem(Block(Sym(22)))))
TP(Sym(24),ArrayIndex(Sym(14),Const(0)))
TP(Sym(25),Reflect(Print(Sym(24)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(26),ArrayIndex(Sym(23),Const(0)))
TP(Sym(27),Reflect(Print(Sym(26)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(25))))
TP(Sym(28),Reify(Sym(27),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(25), Sym(27))))

-- before transformation
val x8 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
x8(x5) = x6
}
val x9 = x8.length
val x14 = new Array[Int](x9)
for (x10 <- 0 until x9) {
val x11 = x8.apply(x10)
val x12 = x11 + 3
x14(x10) = x12
}
val x24 = x14.apply(0)
val x25 = println(x24)
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x15 = x4.length
val x20 = x8.apply(0)
val x23 = new Array[Int](x15)
for (x16 <- 0 until x15) {
val x17 = x4.apply(x16)
val x18 = x8.apply(x16)
val x19 = x17 + x18
val x21 = x19 + x20
x23(x16) = x21
}
val x26 = x23.apply(0)
val x27 = println(x26)

-- vertical transformation

(VFT) No producers found for cons Sym(8)
(VFT) Replaced TP(Sym(9),ArrayLength(Sym(8))) with fixed length: Const(100)

(VFT) Fusing prod Sym(8) with cons Sym(14). Type: Mc_McForRed(Sym(10),Sym(5),Sym(9),Const(100),Single_McFor(Sym(10),(Sym(8),Sym(10)),Sym(6),Sym(13),Sym(7),Sym(14)),Sym(13),Sym(7),Sym(8),Sym(14))
(VFT) Fused prod Sym(8) with cons Sym(14), fused sym: Sym(31)

(VFT) No producers found for cons Sym(4)
(VFT) Cons Sym(4) not fused but mirrored to Sym(36) because of fixed shape
(VFT) Replaced TP(Sym(15),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) Not fused prod Sym(8) with cons Sym(23) because consumer depends on producer through Sym(31)
(VFT) Fusing prod Sym(36) with cons Sym(23). Type: Mc_McForRed(Sym(16),Sym(5),Sym(15),Const(100),Single_McFor(Sym(16),(Sym(4),Sym(16)),Sym(34),Sym(22),Sym(35),Sym(23)),Sym(22),Sym(35),Sym(36),Sym(23))
(VFT) Fused prod Sym(36) with cons Sym(23), fused sym: Sym(41)

(VFT) all vertically fused: List(Sym(31), Sym(8))
List(Sym(36), Sym(41))

-- after vertical transformation
val x31 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
val x29 = x6 + 3
x31(x5) = x29
}
val x32 = x31.apply(0)
val x33 = println(x32)
val x8 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
x8(x5) = x6
}
val x20 = x8.apply(0)
val x41 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x34 = x5 + 1
val x37 = x8.apply(x5)
val x38 = x34 + x37
val x39 = x38 + x20
x41(x5) = x39
}
val x42 = x41.apply(0)
val x43 = println(x42)

-- horizontal transformation
(HFT) Recording Sym(31), no fusion
(HFT) Fusing Sym(8) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(5), loopSyms = List(Sym(31), Sym(8), Sym(14)))
(HFT) - already using same index Sym(5)
(HFT) The candidate Sym(41) and its set (List(Sym(41), Sym(36), Sym(23))) cannot be fused with the existing FusedLoopSet(shape = Const(100), indexSym = Sym(5), loopSyms = List(Sym(31), Sym(8), Sym(14))) because the candidate set depends on Sym(8)
(HFT) Recording Sym(41), no fusion

(HFT) all horizontally fused: List(Sym(31), Sym(8))

-- after horizontal transformation
val x31 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
val x29 = x6 + 3
x31(x5) = x29
}
val x32 = x31.apply(0)
val x45 = println(x32)
val x8 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
x8(x5) = x6
}
val x20 = x8.apply(0)
val x41 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x34 = x5 + 1
val x37 = x8.apply(x5)
val x38 = x34 + x37
val x39 = x38 + x20
x41(x5) = x39
}
val x42 = x41.apply(0)
val x46 = println(x42)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(31)),List(SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(30))))),SimpleFatLoop(Const(100),Sym(5),List(MultiArrayElem(Block(Sym(30))))))
TTP(List(Sym(8)),List(SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(7))))),SimpleFatLoop(Const(100),Sym(5),List(MultiArrayElem(Block(Sym(7))))))

val x31 = new Array[Int](100)
val x8 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
val x29 = x6 + 3
x31(x5) = x29
x8(x5) = x6
}
val x32 = x31.apply(0)
val x45 = println(x32)
val x20 = x8.apply(0)
val x41 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x34 = x5 + 1
val x37 = x8.apply(x5)
val x38 = x34 + x37
val x39 = x38 + x20
x41(x5) = x39
}
val x42 = x41.apply(0)
val x46 = println(x42)
-- done
