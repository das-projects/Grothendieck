-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),IntTimes(Sym(2),Sym(1)))
TP(Sym(4),IntTimes(Sym(1),Sym(3)))
TP(Sym(5),SingletonInLoop(Sym(4),Sym(1)))
TP(Sym(6),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(5)))))
TP(Sym(7),ArrayLength(Sym(6)))
TP(Sym(9),OrderingGT(Sym(8),Const(50)))
TP(Sym(10),OrderingGT(Sym(8),Const(60)))
TP(Sym(11),SingletonInLoop(Sym(10),Sym(8)))
TP(Sym(13),EmptyArrayInLoop(Sym(8),Sym(12)))
TP(Sym(14),IfThenElse(Sym(9),Block(Sym(11)),Block(Sym(13))))
TP(Sym(15),SimpleLoop(Sym(7),Sym(8),MultiArrayElem(Block(Sym(14)))))
TP(Sym(16),ArrayLength(Sym(15)))
TP(Sym(17),Reflect(Print(Sym(16)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(18),Reify(Sym(17),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(17))))

-- before transformation
val x6 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x6(x1) = x4
}
val x7 = x6.length
val x15_builder = new scala.collection.mutable.ArrayBuilder.ofBoolean
for (x8 <- 0 until x7) {
val x9 = x8 > 50
if (x9) {
val x10 = x8 > 60
x15_builder += x10
}
}
val x15 = x15_builder.result()
val x16 = x15.length
val x17 = println(x16)

-- vertical transformation

(VFT) No producers found for cons Sym(6)
(VFT) Replaced TP(Sym(7),ArrayLength(Sym(6))) with fixed length: Const(100)

(VFT) No producers found for cons Sym(15)
(VFT) Cons Sym(15) not fused but mirrored to Sym(19) because of previous substitutions or effects

(VFT) all vertically fused: 

-- after vertical transformation
val x19_builder = new scala.collection.mutable.ArrayBuilder.ofBoolean
for (x8 <- 0 until 100) {
val x9 = x8 > 50
if (x9) {
val x10 = x8 > 60
x19_builder += x10
}
}
val x19 = x19_builder.result()
val x20 = x19.length
val x21 = println(x20)

-- horizontal transformation
(HFT) Recording Sym(19), no fusion
  (HFT) Recording if-sym Sym(14), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
val x19_builder = new scala.collection.mutable.ArrayBuilder.ofBoolean
for (x8 <- 0 until 100) {
val x9 = x8 > 50
if (x9) {
val x10 = x8 > 60
x19_builder += x10
}
}
val x19 = x19_builder.result()
val x20 = x19.length
val x23 = println(x20)

-- fusion
val x19_builder = new scala.collection.mutable.ArrayBuilder.ofBoolean
for (x8 <- 0 until 100) {
val x9 = x8 > 50
if (x9) {
val x10 = x8 > 60
x19_builder += x10
}
}
val x19 = x19_builder.result()
val x20 = x19.length
val x23 = println(x20)
-- done
