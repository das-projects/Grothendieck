-- full graph
TP(Sym(3),OrderingGT(Sym(2),Const(5)))
TP(Sym(4),IntPlus(Sym(2),Const(1)))
TP(Sym(5),SingletonInLoop(Sym(4),Sym(2)))
TP(Sym(7),EmptyArrayInLoop(Sym(2),Sym(6)))
TP(Sym(8),IfThenElse(Sym(3),Block(Sym(5)),Block(Sym(7))))
TP(Sym(9),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(8)))))
TP(Sym(10),SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(9)))))
TP(Sym(11),ArrayLength(Sym(10)))
TP(Sym(13),ArrayIndex(Sym(10),Sym(12)))
TP(Sym(14),IntPlus(Sym(13),Const(2)))
TP(Sym(15),SingletonInLoop(Sym(14),Sym(12)))
TP(Sym(16),SimpleLoop(Sym(11),Sym(12),MultiArrayElem(Block(Sym(15)))))
TP(Sym(17),ArrayLength(Sym(16)))
TP(Sym(19),ArrayIndex(Sym(16),Sym(18)))
TP(Sym(20),OrderingGT(Sym(19),Const(20)))
TP(Sym(21),IntPlus(Sym(19),Const(3)))
TP(Sym(22),SingletonInLoop(Sym(21),Sym(18)))
TP(Sym(24),EmptyArrayInLoop(Sym(18),Sym(23)))
TP(Sym(25),IfThenElse(Sym(20),Block(Sym(22)),Block(Sym(24))))
TP(Sym(26),SimpleLoop(Sym(17),Sym(18),MultiArrayElem(Block(Sym(25)))))
TP(Sym(27),ArrayIndex(Sym(16),Const(0)))
TP(Sym(28),Reflect(Print(Sym(27)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(29),ArrayIndex(Sym(26),Const(0)))
TP(Sym(30),Reflect(Print(Sym(29)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(28))))
TP(Sym(31),Reify(Sym(30),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(28), Sym(30))))

-- before transformation
val x9_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
x9_builder += x4
}
}
val x9 = x9_builder.result()
val x10_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x10_builder ++= x9
}
val x10 = x10_builder.result()
val x11 = x10.length
val x16 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x10.apply(x12)
val x14 = x13 + 2
x16(x12) = x14
}
val x27 = x16.apply(0)
val x28 = println(x27)
val x17 = x16.length
val x26_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x18 <- 0 until x17) {
val x19 = x16.apply(x18)
val x20 = x19 > 20
if (x20) {
val x21 = x19 + 3
x26_builder += x21
}
}
val x26 = x26_builder.result()
val x29 = x26.apply(0)
val x30 = println(x29)

-- vertical transformation

(VFT) No producers found for cons Sym(9)

(VFT) No producers found for cons Sym(10)

(VFT) Fusing prod Sym(10) with cons Sym(16). Type: Mc_McForRed(Sym(12),Sym(1),Sym(11),Const(30),Mc_McForRed(Sym(12),Sym(2),Sym(11),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(12),(Sym(10),Sym(12)),Sym(4),Sym(15),Sym(5),Sym(16)),Empty_Mc(Sym(33),Sym(7),Sym(16)),Sym(16),Sym(8),Sym(16)),Sym(15),Sym(8),Sym(9),Sym(16)),Sym(15),Sym(9),Sym(10),Sym(16))
(VFT) Fused prod Sym(10) with cons Sym(16), fused sym: Sym(38)

(VFT) Fusing prod Sym(38) with cons Sym(26). Type: Mc_McForRed(Sym(18),Sym(1),Sym(17),Const(30),Mc_McForRed(Sym(18),Sym(2),Sym(17),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(18),(Sym(16),Sym(18)),Sym(34),Sym(25),Sym(35),Sym(26)),Empty_Mc(Sym(33),Sym(33),Sym(26)),Sym(26),Sym(36),Sym(26)),Sym(25),Sym(36),Sym(37),Sym(26)),Sym(25),Sym(37),Sym(38),Sym(26))
(VFT) Fused prod Sym(38) with cons Sym(26), fused sym: Sym(49)

(VFT) all vertically fused: List(Sym(47), Sym(36), Sym(8))
List(Sym(10), Sym(38), Sym(49))
List(Sym(37), Sym(48), Sym(9))

-- after vertical transformation
val x37_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x34 = x4 + 2
x37_builder += x34
}
}
val x37 = x37_builder.result()
val x38_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x38_builder ++= x37
}
val x38 = x38_builder.result()
val x39 = x38.apply(0)
val x40 = println(x39)
val x48_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x47 = if (x3) {
val x4 = x2 + 1
val x34 = x4 + 2
val x42 = x34 > 20
val x46 = if (x42) {
val x43 = x34 + 3
val x44 = Array(x43)
x44
} else {
val x45: Array[Int] = Array.empty
x45
}
x46
} else {
val x33: Array[Int] = Array.empty
x33
}
x48_builder ++= x47
}
val x48 = x48_builder.result()
val x49_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x49_builder ++= x48
}
val x49 = x49_builder.result()
val x50 = x49.apply(0)
val x51 = println(x50)

-- horizontal transformation
(HFT) Recording Sym(37), no fusion
  (HFT) Recording if-sym Sym(36), no fusion
(HFT) Recording Sym(38), no fusion
(HFT) Fusing Sym(48) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(48), Sym(9), Sym(37)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(47) with containing fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(47), Sym(8), Sym(36)))
    (HFT) Recording if-sym Sym(46), no fusion
(HFT) Fusing Sym(49) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(49), Sym(26), Sym(38), Sym(10), Sym(16)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(38), Sym(49))
List(Sym(37), Sym(48))

-- after horizontal transformation
val x37_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x34 = x4 + 2
x37_builder += x34
}
}
val x37 = x37_builder.result()
val x38_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x38_builder ++= x37
}
val x38 = x38_builder.result()
val x39 = x38.apply(0)
val x53 = println(x39)
val x48_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x47 = if (x3) {
val x4 = x2 + 1
val x34 = x4 + 2
val x42 = x34 > 20
val x46 = if (x42) {
val x43 = x34 + 3
val x44 = Array(x43)
x44
} else {
val x45: Array[Int] = Array.empty
x45
}
x46
} else {
val x33: Array[Int] = Array.empty
x33
}
x48_builder ++= x47
}
val x48 = x48_builder.result()
val x49_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x49_builder ++= x48
}
val x49 = x49_builder.result()
val x50 = x49.apply(0)
val x54 = println(x50)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(37)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(36))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(36))))))
TTP(List(Sym(48)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(47))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(47))))))

(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(38)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(37))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(37))))))
TTP(List(Sym(49)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(48))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(48))))))

(CTS) Fusing these ifs into one fat TTP: 
TTP(List(Sym(36)),List(IfThenElse(Sym(3),Block(Sym(35)),Block(Sym(33)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(35))),List(Block(Sym(33)))))
TTP(List(Sym(47)),List(IfThenElse(Sym(3),Block(Sym(46)),Block(Sym(33)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(46))),List(Block(Sym(33)))))

val x37_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x48_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x33: Array[Int] = Array.empty
// TODO: use vars instead of tuples to return multiple values
val (x36,x47) = if (x3) {
val x4 = x2 + 1
val x34 = x4 + 2
val x35 = Array(x34)
val x42 = x34 > 20
val x46 = if (x42) {
val x43 = x34 + 3
val x44 = Array(x43)
x44
} else {
val x45: Array[Int] = Array.empty
x45
}
(x35,x46)
} else {
(x33,x33)
}
x37_builder ++= x36
x48_builder ++= x47
}
val x37 = x37_builder.result()
val x48 = x48_builder.result()
val x38_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x49_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x38_builder ++= x37
x49_builder ++= x48
}
val x38 = x38_builder.result()
val x49 = x49_builder.result()
val x39 = x38.apply(0)
val x53 = println(x39)
val x50 = x49.apply(0)
val x54 = println(x50)
-- done
