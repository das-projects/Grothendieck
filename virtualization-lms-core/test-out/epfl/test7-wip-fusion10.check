-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(6),IntTimes(Sym(5),Const(4)))
TP(Sym(7),ArrayLength(Sym(4)))
TP(Sym(9),ArrayIndex(Sym(4),Sym(8)))
TP(Sym(10),IntTimes(Sym(9),Const(5)))
TP(Sym(11),IntPlus(Sym(10),Sym(5)))
TP(Sym(12),SingletonInLoop(Sym(11),Sym(8)))
TP(Sym(13),SimpleLoop(Sym(7),Sym(8),MultiArrayElem(Block(Sym(12)))))
TP(Sym(14),ArrayLength(Sym(13)))
TP(Sym(16),ArrayIndex(Sym(13),Sym(15)))
TP(Sym(17),IntTimes(Sym(16),Const(6)))
TP(Sym(18),SingletonInLoop(Sym(17),Sym(15)))
TP(Sym(19),SimpleLoop(Sym(14),Sym(15),MultiArrayElem(Block(Sym(18)))))
TP(Sym(20),ArrayIndex(Sym(19),Const(0)))
TP(Sym(21),IntTimes(Sym(6),Sym(20)))
TP(Sym(22),SingletonInLoop(Sym(21),Sym(5)))
TP(Sym(23),SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(22)))))
TP(Sym(24),ArrayIndex(Sym(23),Const(0)))
TP(Sym(25),Reflect(Print(Sym(24)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(26),Reify(Sym(25),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(25))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x7 = x4.length
val x23 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 * 4
val x13 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x4.apply(x8)
val x10 = x9 * 5
val x11 = x10 + x5
x13(x8) = x11
}
val x14 = x13.length
val x19 = new Array[Int](x14)
for (x15 <- 0 until x14) {
val x16 = x13.apply(x15)
val x17 = x16 * 6
x19(x15) = x17
}
val x20 = x19.apply(0)
val x21 = x6 * x20
x23(x5) = x21
}
val x24 = x23.apply(0)
val x25 = println(x24)

-- vertical transformation

(VFT) No producers found for cons Sym(4)
(VFT) Replaced TP(Sym(7),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) No producers found for cons Sym(23)
  
  (VFT) Not fused prod Sym(4) with cons Sym(13) because not in same exact scope
  (VFT) No producers found for cons Sym(13)
  (VFT) Cons Sym(13) not fused but mirrored to Sym(30) because of previous substitutions or effects
  (VFT) Replaced TP(Sym(14),ArrayLength(Sym(13))) with fixed length: Const(100)
  
  (VFT) Fusing prod Sym(30) with cons Sym(19). Type: Mc_McForRed(Sym(15),Sym(8),Sym(14),Const(100),Single_McFor(Sym(15),(Sym(13),Sym(15)),Sym(28),Sym(18),Sym(29),Sym(19)),Sym(18),Sym(29),Sym(30),Sym(19))
  (VFT) Fused prod Sym(30) with cons Sym(19), fused sym: Sym(33)
(VFT) Cons Sym(23) not fused but mirrored to Sym(37) because of fixed shape

(VFT) all vertically fused: List(Sym(30), Sym(33))

-- after vertical transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x37 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x27 = x1 * 4
val x33 = new Array[Int](100)
for (x8 <- 0 until 100) {
val x9 = x4.apply(x8)
val x10 = x9 * 5
val x28 = x10 + x1
val x31 = x28 * 6
x33(x8) = x31
}
val x34 = x33.apply(0)
val x35 = x27 * x34
x37(x1) = x35
}
val x38 = x37.apply(0)
val x39 = println(x38)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) The candidate Sym(37) cannot be fused with the existing FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(4))) because the candidate set depends on Sym(4)
(HFT) Recording Sym(37), no fusion
  (HFT) Recording Sym(33), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x37 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x27 = x1 * 4
val x33 = new Array[Int](100)
for (x8 <- 0 until 100) {
val x9 = x4.apply(x8)
val x10 = x9 * 5
val x28 = x10 + x1
val x31 = x28 * 6
x33(x8) = x31
}
val x34 = x33.apply(0)
val x35 = x27 * x34
x37(x1) = x35
}
val x38 = x37.apply(0)
val x41 = println(x38)

-- fusion
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x37 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x27 = x1 * 4
val x33 = new Array[Int](100)
for (x8 <- 0 until 100) {
val x9 = x4.apply(x8)
val x10 = x9 * 5
val x28 = x10 + x1
val x31 = x28 * 6
x33(x8) = x31
}
val x34 = x33.apply(0)
val x35 = x27 * x34
x37(x1) = x35
}
val x38 = x37.apply(0)
val x41 = println(x38)
-- done
