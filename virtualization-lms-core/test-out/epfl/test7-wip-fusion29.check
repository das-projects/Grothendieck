-- full graph
TP(Sym(3),OrderingGT(Sym(2),Const(5)))
TP(Sym(4),IntPlus(Sym(2),Const(1)))
TP(Sym(5),SingletonInLoop(Sym(4),Sym(2)))
TP(Sym(7),EmptyArrayInLoop(Sym(2),Sym(6)))
TP(Sym(8),IfThenElse(Sym(3),Block(Sym(5)),Block(Sym(7))))
TP(Sym(9),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(8)))))
TP(Sym(10),SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(9)))))
TP(Sym(11),ArrayLength(Sym(10)))
TP(Sym(13),ArrayIndex(Sym(10),Sym(12)))
TP(Sym(14),IntPlus(Sym(13),Const(2)))
TP(Sym(15),SingletonInLoop(Sym(14),Sym(12)))
TP(Sym(16),SimpleLoop(Sym(11),Sym(12),MultiArrayElem(Block(Sym(15)))))
TP(Sym(18),ArrayIndex(Sym(10),Sym(17)))
TP(Sym(19),OrderingGT(Sym(18),Const(20)))
TP(Sym(20),IntPlus(Sym(18),Const(3)))
TP(Sym(21),SingletonInLoop(Sym(20),Sym(17)))
TP(Sym(23),EmptyArrayInLoop(Sym(17),Sym(22)))
TP(Sym(24),IfThenElse(Sym(19),Block(Sym(21)),Block(Sym(23))))
TP(Sym(25),SimpleLoop(Sym(11),Sym(17),MultiArrayElem(Block(Sym(24)))))
TP(Sym(27),ArrayIndex(Sym(10),Sym(26)))
TP(Sym(29),IntPlus(Sym(27),Sym(28)))
TP(Sym(30),SingletonInLoop(Sym(29),Sym(28)))
TP(Sym(31),SimpleLoop(Sym(27),Sym(28),MultiArrayElem(Block(Sym(30)))))
TP(Sym(32),SimpleLoop(Sym(11),Sym(26),MultiArrayElem(Block(Sym(31)))))
TP(Sym(34),ArrayIndex(Sym(10),Sym(33)))
TP(Sym(35),IntPlus(Const(2),Sym(34)))
TP(Sym(36),SingletonInLoop(Sym(35),Sym(33)))
TP(Sym(39),NumericPlus(Sym(38),Sym(37)))
TP(Sym(40),SimpleLoop(Sym(11),Sym(33),MultiReduceElem(Block(Sym(36)),Block(Sym(39)),Const(0),Sym(37),Sym(38))))
TP(Sym(43),ArrayIndex(Sym(10),Sym(41)))
TP(Sym(44),IntPlus(Sym(43),Sym(42)))
TP(Sym(45),SingletonInLoop(Sym(44),Sym(42)))
TP(Sym(46),SimpleLoop(Const(2),Sym(42),MultiArrayElem(Block(Sym(45)))))
TP(Sym(49),IntPlus(Sym(48),Sym(47)))
TP(Sym(50),SimpleLoop(Sym(11),Sym(41),MultiReduceElem(Block(Sym(46)),Block(Sym(49)),Const(0),Sym(47),Sym(48))))
TP(Sym(51),ArrayIndex(Sym(16),Const(0)))
TP(Sym(52),Reflect(Print(Sym(51)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(53),ArrayIndex(Sym(25),Const(0)))
TP(Sym(54),Reflect(Print(Sym(53)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(52))))
TP(Sym(55),ArrayIndex(Sym(32),Const(0)))
TP(Sym(56),Reflect(Print(Sym(55)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(54))))
TP(Sym(57),Reflect(Print(Sym(40)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(56))))
TP(Sym(58),Reflect(Print(Sym(50)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(57))))
TP(Sym(59),Reify(Sym(58),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(52), Sym(54), Sym(56), Sym(57), Sym(58))))

-- before transformation
val x9_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
x9_builder += x4
}
}
val x9 = x9_builder.result()
val x10_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x10_builder ++= x9
}
val x10 = x10_builder.result()
val x11 = x10.length
val x16 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x10.apply(x12)
val x14 = x13 + 2
x16(x12) = x14
}
val x51 = x16.apply(0)
val x52 = println(x51)
val x25_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x17 <- 0 until x11) {
val x18 = x10.apply(x17)
val x19 = x18 > 20
if (x19) {
val x20 = x18 + 3
x25_builder += x20
}
}
val x25 = x25_builder.result()
val x53 = x25.apply(0)
val x54 = println(x53)
val x32_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x26 <- 0 until x11) {
val x27 = x10.apply(x26)
val x31 = new Array[Int](x27)
for (x28 <- 0 until x27) {
val x29 = x27 + x28
x31(x28) = x29
}
x32_builder ++= x31
}
val x32 = x32_builder.result()
val x55 = x32.apply(0)
val x56 = println(x55)
var x37 = 0
for (x33 <- 0 until x11) {
val x34 = x10.apply(x33)
val x35 = 2 + x34
val x38 = x35
val x39 = x38 + x37
x37 = x39
}
val x40 = x37
val x57 = println(x40)
var x47 = 0
for (x41 <- 0 until x11) {
val x43 = x10.apply(x41)
val x46 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x44 = x43 + x42
x46(x42) = x44
}
for (x60 <- 0 until x46.length) {
val x48 = x46.apply(x60)
val x49 = x48 + x47
x47 = x49
}
}
val x50 = x47
val x58 = println(x50)

-- vertical transformation

(VFT) No producers found for cons Sym(9)

(VFT) No producers found for cons Sym(10)

(VFT) Fusing prod Sym(10) with cons Sym(16). Type: Mc_McForRed(Sym(12),Sym(1),Sym(11),Const(30),Mc_McForRed(Sym(12),Sym(2),Sym(11),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(12),(Sym(10),Sym(12)),Sym(4),Sym(15),Sym(5),Sym(16)),Empty_Mc(Sym(62),Sym(7),Sym(16)),Sym(16),Sym(8),Sym(16)),Sym(15),Sym(8),Sym(9),Sym(16)),Sym(15),Sym(9),Sym(10),Sym(16))
(VFT) Fused prod Sym(10) with cons Sym(16), fused sym: Sym(67)

(VFT) Fusing prod Sym(10) with cons Sym(25). Type: Mc_McForRed(Sym(17),Sym(1),Sym(11),Const(30),Mc_McForRed(Sym(17),Sym(2),Sym(11),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(17),(Sym(10),Sym(17)),Sym(4),Sym(24),Sym(5),Sym(25)),Empty_Mc(Sym(62),Sym(7),Sym(25)),Sym(25),Sym(8),Sym(25)),Sym(24),Sym(8),Sym(9),Sym(25)),Sym(24),Sym(9),Sym(10),Sym(25))
(VFT) Fused prod Sym(10) with cons Sym(25), fused sym: Sym(77)

(VFT) Fusing prod Sym(10) with cons Sym(32). Type: Mc_McForRed(Sym(26),Sym(1),Sym(11),Const(30),Mc_McForRed(Sym(26),Sym(2),Sym(11),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(26),(Sym(10),Sym(26)),Sym(4),Sym(31),Sym(5),Sym(32)),Empty_Mc(Sym(62),Sym(7),Sym(32)),Sym(32),Sym(8),Sym(32)),Sym(31),Sym(8),Sym(9),Sym(32)),Sym(31),Sym(9),Sym(10),Sym(32))
  
  (VFT) No producers found for cons Sym(31)
  (VFT) Cons Sym(31) not fused but mirrored to Sym(82) because of previous substitutions or effects
(VFT) Fused prod Sym(10) with cons Sym(32), fused sym: Sym(85)

(VFT) Fusing prod Sym(10) with cons Sym(40). Type: Mc_McForRed(Sym(33),Sym(1),Sym(11),Const(30),InnerMc_Red(Sym(33),Sym(2),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(33),(Sym(10),Sym(33)),Sym(4),Sym(36),Sym(5),Sym(40)),Empty_Mc(Sym(62),Sym(7),Sym(40)),Sym(36),Sym(8),Sym(40)),Sym(36),Sym(8),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(8)))),Sym(9),Sym(40)),Sym(36),Sym(9),Sym(10),Sym(40))
(VFT) Fused prod Sym(10) with cons Sym(40), fused sym: Sym(92)

(VFT) Fusing prod Sym(10) with cons Sym(50). Type: Mc_McForRed(Sym(41),Sym(1),Sym(11),Const(30),InnerMc_Red(Sym(41),Sym(2),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(41),(Sym(10),Sym(41)),Sym(4),Sym(46),Sym(5),Sym(50)),Empty_Mc(Sym(62),Sym(7),Sym(50)),Sym(46),Sym(8),Sym(50)),Sym(46),Sym(8),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(8)))),Sym(9),Sym(50)),Sym(46),Sym(9),Sym(10),Sym(50))
  
  (VFT) No producers found for cons Sym(46)
  (VFT) Cons Sym(46) not fused but mirrored to Sym(96) because of previous substitutions or effects
(VFT) Fused prod Sym(10) with cons Sym(50), fused sym: Sym(99)

(VFT) all vertically fused: List(Sym(75), Sym(83), Sym(97), Sym(65), Sym(8), Sym(90))
List(Sym(84), Sym(91), Sym(66), Sym(98), Sym(76), Sym(9))
List(Sym(10), Sym(77), Sym(99), Sym(85), Sym(67), Sym(92))

-- after vertical transformation
val x66_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x63 = x4 + 2
x66_builder += x63
}
}
val x66 = x66_builder.result()
val x67_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x67_builder ++= x66
}
val x67 = x67_builder.result()
val x68 = x67.apply(0)
val x69 = println(x68)
val x76_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x75 = if (x3) {
val x4 = x2 + 1
val x70 = x4 > 20
val x74 = if (x70) {
val x71 = x4 + 3
val x72 = Array(x71)
x72
} else {
val x73: Array[Int] = Array.empty
x73
}
x74
} else {
val x62: Array[Int] = Array.empty
x62
}
x76_builder ++= x75
}
val x76 = x76_builder.result()
val x77_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x77_builder ++= x76
}
val x77 = x77_builder.result()
val x78 = x77.apply(0)
val x79 = println(x78)
val x84_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x83 = if (x3) {
val x4 = x2 + 1
val x82 = new Array[Int](x4)
for (x28 <- 0 until x4) {
val x80 = x4 + x28
x82(x28) = x80
}
x82
} else {
val x62: Array[Int] = Array.empty
x62
}
x84_builder ++= x83
}
val x84 = x84_builder.result()
val x85_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x85_builder ++= x84
}
val x85 = x85_builder.result()
val x86 = x85.apply(0)
val x87 = println(x86)
val x91_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x88 = 2 + x4
x91_builder += x88
}
}
val x91 = x91_builder.result()
var x37 = 0
for (x1 <- 0 until 30) {
for (x102 <- 0 until x91.length) {
val x38 = x91.apply(x102)
val x39 = x38 + x37
x37 = x39
}
}
val x92 = x37
val x93 = println(x92)
val x98_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x97 = if (x3) {
val x4 = x2 + 1
val x96 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x94 = x4 + x42
x96(x42) = x94
}
x96
} else {
val x62: Array[Int] = Array.empty
x62
}
x98_builder ++= x97
}
val x98 = x98_builder.result()
var x47 = 0
for (x1 <- 0 until 30) {
for (x103 <- 0 until x98.length) {
val x48 = x98.apply(x103)
val x49 = x48 + x47
x47 = x49
}
}
val x99 = x47
val x100 = println(x99)

-- horizontal transformation
(HFT) Recording Sym(66), no fusion
  (HFT) Recording if-sym Sym(65), no fusion
(HFT) Recording Sym(67), no fusion
(HFT) Fusing Sym(76) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(98), Sym(91), Sym(84), Sym(76), Sym(9), Sym(66)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(75) with containing fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(97), Sym(90), Sym(83), Sym(75), Sym(8), Sym(65)))
    (HFT) Recording if-sym Sym(74), no fusion
(HFT) Fusing Sym(77) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(99), Sym(50), Sym(92), Sym(40), Sym(85), Sym(32), Sym(77), Sym(25), Sym(67), Sym(10), Sym(16)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(84) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(98), Sym(91), Sym(84), Sym(76), Sym(9), Sym(66)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(83) with containing fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(97), Sym(90), Sym(83), Sym(75), Sym(8), Sym(65)))
    (HFT) Recording Sym(82), no fusion
(HFT) Fusing Sym(85) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(99), Sym(50), Sym(92), Sym(40), Sym(85), Sym(32), Sym(77), Sym(25), Sym(67), Sym(10), Sym(16)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(91) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(98), Sym(91), Sym(84), Sym(76), Sym(9), Sym(66)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(90) with containing fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(97), Sym(90), Sym(83), Sym(75), Sym(8), Sym(65)))
(HFT) Fusing Sym(92) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(99), Sym(50), Sym(92), Sym(40), Sym(85), Sym(32), Sym(77), Sym(25), Sym(67), Sym(10), Sym(16)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(98) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(98), Sym(91), Sym(84), Sym(76), Sym(9), Sym(66)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(97) with containing fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(97), Sym(90), Sym(83), Sym(75), Sym(8), Sym(65)))
    (HFT) Recording Sym(96), no fusion
(HFT) Fusing Sym(99) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(99), Sym(50), Sym(92), Sym(40), Sym(85), Sym(32), Sym(77), Sym(25), Sym(67), Sym(10), Sym(16)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(67), Sym(77), Sym(85), Sym(92), Sym(99))
List(Sym(66), Sym(76), Sym(84), Sym(91), Sym(98))

-- after horizontal transformation
val x66_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x63 = x4 + 2
x66_builder += x63
}
}
val x66 = x66_builder.result()
val x67_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x67_builder ++= x66
}
val x67 = x67_builder.result()
val x68 = x67.apply(0)
val x104 = println(x68)
val x76_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x75 = if (x3) {
val x4 = x2 + 1
val x70 = x4 > 20
val x74 = if (x70) {
val x71 = x4 + 3
val x72 = Array(x71)
x72
} else {
val x73: Array[Int] = Array.empty
x73
}
x74
} else {
val x62: Array[Int] = Array.empty
x62
}
x76_builder ++= x75
}
val x76 = x76_builder.result()
val x77_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x77_builder ++= x76
}
val x77 = x77_builder.result()
val x78 = x77.apply(0)
val x105 = println(x78)
val x84_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x83 = if (x3) {
val x4 = x2 + 1
val x82 = new Array[Int](x4)
for (x28 <- 0 until x4) {
val x80 = x4 + x28
x82(x28) = x80
}
x82
} else {
val x62: Array[Int] = Array.empty
x62
}
x84_builder ++= x83
}
val x84 = x84_builder.result()
val x85_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x85_builder ++= x84
}
val x85 = x85_builder.result()
val x86 = x85.apply(0)
val x106 = println(x86)
val x91_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x88 = 2 + x4
x91_builder += x88
}
}
val x91 = x91_builder.result()
var x37 = 0
for (x1 <- 0 until 30) {
for (x110 <- 0 until x91.length) {
val x38 = x91.apply(x110)
val x39 = x38 + x37
x37 = x39
}
}
val x92 = x37
val x107 = println(x92)
val x98_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x97 = if (x3) {
val x4 = x2 + 1
val x96 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x94 = x4 + x42
x96(x42) = x94
}
x96
} else {
val x62: Array[Int] = Array.empty
x62
}
x98_builder ++= x97
}
val x98 = x98_builder.result()
var x47 = 0
for (x1 <- 0 until 30) {
for (x111 <- 0 until x98.length) {
val x48 = x98.apply(x111)
val x49 = x48 + x47
x47 = x49
}
}
val x99 = x47
val x108 = println(x99)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(66)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(65))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(65))))))
TTP(List(Sym(76)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(75))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(75))))))
TTP(List(Sym(84)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(83))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(83))))))
TTP(List(Sym(91)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(90))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(90))))))
TTP(List(Sym(98)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(97))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(97))))))

(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(67)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(66))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(66))))))
TTP(List(Sym(77)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(76))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(76))))))
TTP(List(Sym(85)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(84))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(84))))))
TTP(List(Sym(92)),List(SimpleLoop(Const(30),Sym(1),MultiReduceElem(Block(Sym(91)),Block(Sym(39)),Const(0),Sym(37),Sym(38)))),SimpleFatLoop(Const(30),Sym(1),List(MultiReduceElem(Block(Sym(91)),Block(Sym(39)),Const(0),Sym(37),Sym(38)))))
TTP(List(Sym(99)),List(SimpleLoop(Const(30),Sym(1),MultiReduceElem(Block(Sym(98)),Block(Sym(49)),Const(0),Sym(47),Sym(48)))),SimpleFatLoop(Const(30),Sym(1),List(MultiReduceElem(Block(Sym(98)),Block(Sym(49)),Const(0),Sym(47),Sym(48)))))

(CTS) Fusing these ifs into one fat TTP: 
TTP(List(Sym(65)),List(IfThenElse(Sym(3),Block(Sym(64)),Block(Sym(62)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(64))),List(Block(Sym(62)))))
TTP(List(Sym(75)),List(IfThenElse(Sym(3),Block(Sym(74)),Block(Sym(62)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(74))),List(Block(Sym(62)))))
TTP(List(Sym(83)),List(IfThenElse(Sym(3),Block(Sym(82)),Block(Sym(62)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(82))),List(Block(Sym(62)))))
TTP(List(Sym(90)),List(IfThenElse(Sym(3),Block(Sym(89)),Block(Sym(62)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(89))),List(Block(Sym(62)))))
TTP(List(Sym(97)),List(IfThenElse(Sym(3),Block(Sym(96)),Block(Sym(62)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(96))),List(Block(Sym(62)))))

val x66_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x76_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x84_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x91_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x98_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x62: Array[Int] = Array.empty
// TODO: use vars instead of tuples to return multiple values
val (x65,x75,x83,x90,x97) = if (x3) {
val x4 = x2 + 1
val x63 = x4 + 2
val x64 = Array(x63)
val x70 = x4 > 20
val x74 = if (x70) {
val x71 = x4 + 3
val x72 = Array(x71)
x72
} else {
val x73: Array[Int] = Array.empty
x73
}
val x82 = new Array[Int](x4)
for (x28 <- 0 until x4) {
val x80 = x4 + x28
x82(x28) = x80
}
val x88 = 2 + x4
val x89 = Array(x88)
val x96 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x94 = x4 + x42
x96(x42) = x94
}
(x64,x74,x82,x89,x96)
} else {
(x62,x62,x62,x62,x62)
}
x66_builder ++= x65
x76_builder ++= x75
x84_builder ++= x83
x91_builder ++= x90
x98_builder ++= x97
}
val x66 = x66_builder.result()
val x76 = x76_builder.result()
val x84 = x84_builder.result()
val x91 = x91_builder.result()
val x98 = x98_builder.result()
val x67_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x77_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x85_builder = new scala.collection.mutable.ArrayBuilder.ofInt
var x37 = 0
var x47 = 0
for (x1 <- 0 until 30) {
x67_builder ++= x66
x77_builder ++= x76
x85_builder ++= x84
for (x112 <- 0 until x91.length) {
val x38 = x91.apply(x112)
val x39 = x38 + x37
x37 = x39
}
for (x113 <- 0 until x98.length) {
val x48 = x98.apply(x113)
val x49 = x48 + x47
x47 = x49
}
}
val x67 = x67_builder.result()
val x77 = x77_builder.result()
val x85 = x85_builder.result()
val x92 = x37
val x99 = x47
val x68 = x67.apply(0)
val x104 = println(x68)
val x78 = x77.apply(0)
val x105 = println(x78)
val x86 = x85.apply(0)
val x106 = println(x86)
val x107 = println(x92)
val x108 = println(x99)
-- done
