-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(6),IntPlus(Sym(5),Const(2)))
TP(Sym(7),SingletonInLoop(Sym(6),Sym(5)))
TP(Sym(8),SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(7)))))
TP(Sym(10),ArrayIndex(Sym(4),Sym(9)))
TP(Sym(11),ArrayIndex(Sym(8),Sym(9)))
TP(Sym(12),IntPlus(Sym(10),Sym(11)))
TP(Sym(13),SingletonInLoop(Sym(12),Sym(9)))
TP(Sym(14),SimpleLoop(Const(100),Sym(9),MultiArrayElem(Block(Sym(13)))))
TP(Sym(15),ArrayIndex(Sym(14),Const(0)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(17),Reify(Sym(16),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(16))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x8 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x5 + 2
x8(x5) = x6
}
val x14 = new Array[Int](100)
for (x9 <- 0 until 100) {
val x10 = x4.apply(x9)
val x11 = x8.apply(x9)
val x12 = x10 + x11
x14(x9) = x12
}
val x15 = x14.apply(0)
val x16 = println(x15)

-- vertical transformation

(VFT) No producers found for cons Sym(4)

(VFT) No producers found for cons Sym(8)
(VFT) Cons Sym(8) not fused but mirrored to Sym(20) because of fixed shape

(VFT) Fusing prod Sym(4) with cons Sym(14) and other prods: List(Sym(8)). Type: ManyMcsingle_McFor(Sym(9),Sym(1),(Sym(4),Sym(9)),Sym(2),List(((Sym(8),Sym(9)),Sym(18))),Sym(4),Sym(14),List())
(VFT) Fused prod Sym(4) and other prods List(Sym(8)) with cons Sym(14), fused sym: Sym(23)

(VFT) all vertically fused: List(Sym(20), Sym(4), Sym(23))

-- after vertical transformation
val x23 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x18 = x1 + 2
val x21 = x2 + x18
x23(x1) = x21
}
val x24 = x23.apply(0)
val x25 = println(x24)

-- horizontal transformation
(HFT) Recording Sym(23), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
val x23 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x18 = x1 + 2
val x21 = x2 + x18
x23(x1) = x21
}
val x24 = x23.apply(0)
val x27 = println(x24)

-- fusion
val x23 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x18 = x1 + 2
val x21 = x2 + x18
x23(x1) = x21
}
val x24 = x23.apply(0)
val x27 = println(x24)
-- done
