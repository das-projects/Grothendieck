-- full graph
TP(Sym(2),Reflect(PrintX(Sym(1)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(3),Reify(Sym(2),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(2))))
TP(Sym(4),Reflect(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(3)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(5),ArrayLength(Sym(4)))
TP(Sym(7),ArrayIndex(Sym(4),Sym(6)))
TP(Sym(8),IntPlus(Sym(7),Const(1)))
TP(Sym(9),SimpleLoop(Sym(5),Sym(6),ArrayElem(Block(Sym(8)))))
TP(Sym(10),ArrayIndex(Sym(4),Const(0)))
TP(Sym(11),Reflect(Print(Sym(10)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(4))))
TP(Sym(12),ArrayIndex(Sym(9),Const(0)))
TP(Sym(13),Reflect(Print(Sym(12)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(11))))
TP(Sym(14),Reify(Sym(13),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(4), Sym(11), Sym(13))))

-- before transformation
var x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x15 = println(x1)
val x2 = x1
x4(x1) = x2
}
val x10 = x4.apply(0)
val x11 = println(x10)
val x5 = x4.length
var x9 = new Array[Int](x5)
for (x6 <- 0 until x5) {
val x7 = x4.apply(x6)
val x8 = x7 + 1
x9(x6) = x8
}
val x12 = x9.apply(0)
val x13 = println(x12)

-- vertical transformation

(VFT) No producers found for TP(Sym(4),Reflect(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(3)))), ...)), changed to Sym(18) because of existing substitutions or to reflect effects
(VFT) Replaced TP(Sym(5),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) Sym(9) not fused with Sym(4) because not indep (effectful producers can only be fused if the effects are separate from the value of the loop body, but the loop block result depends on TP(Sym(16),Reflect(PrintX(Sym(1)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))).
(VFT) No producers found for TP(Sym(9),SimpleLoop(Sym(5),Sym(6),ArrayElem(Block(Sym(8))))), remapping to Sym(23) because of fixed shape

(VFT) all vertically fused: 

-- after vertical transformation
var x18 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x27 = println(x1)
val x16 = x1
x18(x1) = x16
}
val x19 = x18.apply(0)
val x20 = println(x19)
var x23 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x21 = x18.apply(x1)
val x22 = x21 + 1
x23(x1) = x22
}
val x24 = x23.apply(0)
val x25 = println(x24)

-- horizontal transformation
(HFT) Recording Sym(18), no fusion
(HFT) - new loop symbol: Sym(18) -> Sym(30)
(HFT) The candidate Sym(23) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(18))) because the candidate set depends on Sym(18)
(HFT) Recording Sym(23), no fusion
(HFT) - new loop symbol: Sym(23) -> Sym(35)

(HFT) all horizontally fused: 

-- after horizontal transformation
var x30 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x39 = println(x1)
val x28 = x1
x30(x1) = x28
}
val x31 = x30.apply(0)
val x32 = println(x31)
var x35 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x33 = x30.apply(x1)
val x34 = x33 + 1
x35(x1) = x34
}
val x36 = x35.apply(0)
val x37 = println(x36)

-- fusion
var x30 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x40 = println(x1)
val x28 = x1
x30(x1) = x28
}
val x31 = x30.apply(0)
val x32 = println(x31)
var x35 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x33 = x30.apply(x1)
val x34 = x33 + 1
x35(x1) = x34
}
val x36 = x35.apply(0)
val x37 = println(x36)
-- done
