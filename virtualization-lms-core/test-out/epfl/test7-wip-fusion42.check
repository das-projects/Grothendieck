-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayLength(Sym(4)))
TP(Sym(7),ArrayIndex(Sym(4),Sym(6)))
TP(Sym(8),IntPlus(Sym(7),Const(2)))
TP(Sym(9),SingletonInLoop(Sym(8),Sym(6)))
TP(Sym(10),SimpleLoop(Sym(5),Sym(6),MultiArrayElem(Block(Sym(9)))))
TP(Sym(12),IntPlus(Sym(11),Const(3)))
TP(Sym(13),SingletonInLoop(Sym(12),Sym(11)))
TP(Sym(14),SimpleLoop(Const(100),Sym(11),MultiArrayElem(Block(Sym(13)))))
TP(Sym(15),ArrayLength(Sym(14)))
TP(Sym(17),ArrayIndex(Sym(14),Sym(16)))
TP(Sym(18),IntPlus(Sym(17),Const(4)))
TP(Sym(19),SingletonInLoop(Sym(18),Sym(16)))
TP(Sym(20),SimpleLoop(Sym(15),Sym(16),MultiArrayElem(Block(Sym(19)))))
TP(Sym(22),ArrayIndex(Sym(10),Sym(21)))
TP(Sym(23),ArrayIndex(Sym(20),Sym(21)))
TP(Sym(24),IntPlus(Sym(22),Sym(23)))
TP(Sym(25),SingletonInLoop(Sym(24),Sym(21)))
TP(Sym(26),SimpleLoop(Const(100),Sym(21),MultiArrayElem(Block(Sym(25)))))
TP(Sym(28),ArrayIndex(Sym(14),Sym(27)))
TP(Sym(29),ArrayIndex(Sym(4),Const(0)))
TP(Sym(30),IntPlus(Sym(28),Sym(29)))
TP(Sym(31),SingletonInLoop(Sym(30),Sym(27)))
TP(Sym(32),SimpleLoop(Sym(15),Sym(27),MultiArrayElem(Block(Sym(31)))))
TP(Sym(33),Reflect(Print(Sym(29)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(34),ArrayIndex(Sym(10),Const(0)))
TP(Sym(35),Reflect(Print(Sym(34)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(33))))
TP(Sym(36),ArrayIndex(Sym(14),Const(0)))
TP(Sym(37),Reflect(Print(Sym(36)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(35))))
TP(Sym(38),ArrayIndex(Sym(20),Const(0)))
TP(Sym(39),Reflect(Print(Sym(38)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(37))))
TP(Sym(40),ArrayIndex(Sym(26),Const(0)))
TP(Sym(41),Reflect(Print(Sym(40)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(39))))
TP(Sym(42),ArrayIndex(Sym(32),Const(0)))
TP(Sym(43),Reflect(Print(Sym(42)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(41))))
TP(Sym(44),Reify(Sym(43),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(33), Sym(35), Sym(37), Sym(39), Sym(41), Sym(43))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x29 = x4.apply(0)
val x33 = println(x29)
val x5 = x4.length
val x10 = new Array[Int](x5)
for (x6 <- 0 until x5) {
val x7 = x4.apply(x6)
val x8 = x7 + 2
x10(x6) = x8
}
val x34 = x10.apply(0)
val x35 = println(x34)
val x14 = new Array[Int](100)
for (x11 <- 0 until 100) {
val x12 = x11 + 3
x14(x11) = x12
}
val x36 = x14.apply(0)
val x37 = println(x36)
val x15 = x14.length
val x20 = new Array[Int](x15)
for (x16 <- 0 until x15) {
val x17 = x14.apply(x16)
val x18 = x17 + 4
x20(x16) = x18
}
val x38 = x20.apply(0)
val x39 = println(x38)
val x26 = new Array[Int](100)
for (x21 <- 0 until 100) {
val x22 = x10.apply(x21)
val x23 = x20.apply(x21)
val x24 = x22 + x23
x26(x21) = x24
}
val x40 = x26.apply(0)
val x41 = println(x40)
val x32 = new Array[Int](x15)
for (x27 <- 0 until x15) {
val x28 = x14.apply(x27)
val x30 = x28 + x29
x32(x27) = x30
}
val x42 = x32.apply(0)
val x43 = println(x42)

-- vertical transformation

(VFT) No producers found for cons Sym(4)
(VFT) Replaced TP(Sym(5),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) Fusing prod Sym(4) with cons Sym(10). Type: Mc_McForRed(Sym(6),Sym(1),Sym(5),Const(100),Single_McFor(Sym(6),(Sym(4),Sym(6)),Sym(2),Sym(9),Sym(3),Sym(10)),Sym(9),Sym(3),Sym(4),Sym(10))
(VFT) Fused prod Sym(4) with cons Sym(10), fused sym: Sym(48)

(VFT) No producers found for cons Sym(14)
(VFT) Cons Sym(14) not fused but mirrored to Sym(53) because of fixed shape
(VFT) Replaced TP(Sym(15),ArrayLength(Sym(14))) with fixed length: Const(100)

(VFT) Fusing prod Sym(53) with cons Sym(20). Type: Mc_McForRed(Sym(16),Sym(1),Sym(15),Const(100),Single_McFor(Sym(16),(Sym(14),Sym(16)),Sym(51),Sym(19),Sym(52),Sym(20)),Sym(19),Sym(52),Sym(53),Sym(20))
(VFT) Fused prod Sym(53) with cons Sym(20), fused sym: Sym(58)

(VFT) Fusing prod Sym(48) with cons Sym(26) and other prods: List(Sym(20)). Type: ManyMcsingle_McFor(Sym(21),Sym(1),(Sym(10),Sym(21)),Sym(46),List(((Sym(20),Sym(21)),Sym(56))),Sym(48),Sym(26),List())
(VFT) Fused prod Sym(48) and other prods List(Sym(20)) with cons Sym(26), fused sym: Sym(63)

(VFT) Not fused prod Sym(14) with cons Sym(32) because consumer depends on producer through Sym(53)
(VFT) No producers found for cons Sym(32)
(VFT) Cons Sym(32) not fused but mirrored to Sym(69) because of fixed shape

(VFT) all vertically fused: List(Sym(63), Sym(58), Sym(4), Sym(53), Sym(48))

-- after vertical transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x29 = x4.apply(0)
val x45 = println(x29)
val x48 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x46 = x2 + 2
x48(x1) = x46
}
val x49 = x48.apply(0)
val x50 = println(x49)
val x53 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x51 = x1 + 3
x53(x1) = x51
}
val x54 = x53.apply(0)
val x55 = println(x54)
val x58 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x51 = x1 + 3
val x56 = x51 + 4
x58(x1) = x56
}
val x59 = x58.apply(0)
val x60 = println(x59)
val x63 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x46 = x2 + 2
val x51 = x1 + 3
val x56 = x51 + 4
val x61 = x46 + x56
x63(x1) = x61
}
val x64 = x63.apply(0)
val x65 = println(x64)
val x69 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x66 = x53.apply(x1)
val x67 = x66 + x29
x69(x1) = x67
}
val x70 = x69.apply(0)
val x71 = println(x70)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(48) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(63), Sym(26), Sym(48), Sym(4), Sym(10), Sym(58), Sym(53), Sym(20)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(53) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(63), Sym(26), Sym(48), Sym(4), Sym(10), Sym(58), Sym(53), Sym(20)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(58) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(63), Sym(26), Sym(48), Sym(4), Sym(10), Sym(58), Sym(53), Sym(20)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(63) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(63), Sym(26), Sym(48), Sym(4), Sym(10), Sym(58), Sym(53), Sym(20)))
(HFT) - already using same index Sym(1)
(HFT) The candidate Sym(69) cannot be fused with the existing FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(63), Sym(26), Sym(48), Sym(4), Sym(10), Sym(58), Sym(53), Sym(20))) because the candidate set depends on Sym(53)
(HFT) Recording Sym(69), no fusion

(HFT) all horizontally fused: List(Sym(4), Sym(48), Sym(53), Sym(58), Sym(63))

-- after horizontal transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x29 = x4.apply(0)
val x73 = println(x29)
val x48 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x46 = x2 + 2
x48(x1) = x46
}
val x49 = x48.apply(0)
val x74 = println(x49)
val x53 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x51 = x1 + 3
x53(x1) = x51
}
val x54 = x53.apply(0)
val x75 = println(x54)
val x58 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x51 = x1 + 3
val x56 = x51 + 4
x58(x1) = x56
}
val x59 = x58.apply(0)
val x76 = println(x59)
val x63 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x46 = x2 + 2
val x51 = x1 + 3
val x56 = x51 + 4
val x61 = x46 + x56
x63(x1) = x61
}
val x64 = x63.apply(0)
val x77 = println(x64)
val x69 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x66 = x53.apply(x1)
val x67 = x66 + x29
x69(x1) = x67
}
val x70 = x69.apply(0)
val x78 = println(x70)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(3))))))
TTP(List(Sym(48)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(47))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(47))))))
TTP(List(Sym(53)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(52))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(52))))))
TTP(List(Sym(58)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(57))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(57))))))
TTP(List(Sym(63)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(62))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(62))))))

val x4 = new Array[Int](100)
val x48 = new Array[Int](100)
val x53 = new Array[Int](100)
val x58 = new Array[Int](100)
val x63 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x46 = x2 + 2
val x51 = x1 + 3
val x56 = x51 + 4
val x61 = x46 + x56
x4(x1) = x2
x48(x1) = x46
x53(x1) = x51
x58(x1) = x56
x63(x1) = x61
}
val x29 = x4.apply(0)
val x73 = println(x29)
val x49 = x48.apply(0)
val x74 = println(x49)
val x54 = x53.apply(0)
val x75 = println(x54)
val x59 = x58.apply(0)
val x76 = println(x59)
val x64 = x63.apply(0)
val x77 = println(x64)
val x69 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x66 = x53.apply(x1)
val x67 = x66 + x29
x69(x1) = x67
}
val x70 = x69.apply(0)
val x78 = println(x70)
-- done
