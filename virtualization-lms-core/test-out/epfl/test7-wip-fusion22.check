-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(6),ArrayIndex(Sym(4),Sym(5)))
TP(Sym(7),SingletonInLoop(Sym(6),Sym(5)))
TP(Sym(8),SimpleLoop(Const(100),Sym(5),MultiArrayElem(Block(Sym(7)))))
TP(Sym(10),ArrayIndex(Sym(8),Sym(9)))
TP(Sym(11),SingletonInLoop(Sym(10),Sym(9)))
TP(Sym(12),SimpleLoop(Const(100),Sym(9),MultiArrayElem(Block(Sym(11)))))
TP(Sym(14),ArrayIndex(Sym(4),Sym(13)))
TP(Sym(15),ArrayIndex(Sym(12),Const(0)))
TP(Sym(16),IntPlus(Sym(14),Sym(15)))
TP(Sym(17),SingletonInLoop(Sym(16),Sym(13)))
TP(Sym(18),SimpleLoop(Const(100),Sym(13),MultiArrayElem(Block(Sym(17)))))
TP(Sym(19),ArrayIndex(Sym(4),Const(0)))
TP(Sym(20),Reflect(Print(Sym(19)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(21),ArrayIndex(Sym(8),Const(0)))
TP(Sym(22),Reflect(Print(Sym(21)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(20))))
TP(Sym(23),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22))))
TP(Sym(24),ArrayIndex(Sym(18),Const(0)))
TP(Sym(25),Reflect(Print(Sym(24)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(23))))
TP(Sym(26),Reify(Sym(25),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(20), Sym(22), Sym(23), Sym(25))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x19 = x4.apply(0)
val x20 = println(x19)
val x8 = new Array[Int](100)
for (x5 <- 0 until 100) {
val x6 = x4.apply(x5)
x8(x5) = x6
}
val x21 = x8.apply(0)
val x22 = println(x21)
val x12 = new Array[Int](100)
for (x9 <- 0 until 100) {
val x10 = x8.apply(x9)
x12(x9) = x10
}
val x15 = x12.apply(0)
val x23 = println(x15)
val x18 = new Array[Int](100)
for (x13 <- 0 until 100) {
val x14 = x4.apply(x13)
val x16 = x14 + x15
x18(x13) = x16
}
val x24 = x18.apply(0)
val x25 = println(x24)

-- vertical transformation

(VFT) No producers found for cons Sym(4)

(VFT) Fusing prod Sym(4) with cons Sym(8). Type: Mc_McForRed(Sym(5),Sym(1),Const(100),Const(100),Single_McFor(Sym(5),(Sym(4),Sym(5)),Sym(2),Sym(7),Sym(3),Sym(8)),Sym(7),Sym(3),Sym(4),Sym(8))
(VFT) Fused prod Sym(4) with cons Sym(8), fused sym: Sym(4)

(VFT) Fusing prod Sym(4) with cons Sym(12). Type: Mc_McForRed(Sym(9),Sym(1),Const(100),Const(100),Single_McFor(Sym(9),(Sym(8),Sym(9)),Sym(2),Sym(11),Sym(3),Sym(12)),Sym(11),Sym(3),Sym(4),Sym(12))
(VFT) Fused prod Sym(4) with cons Sym(12), fused sym: Sym(4)

(VFT) Not fused prod Sym(4) with cons Sym(18) because consumer depends on producer through Sym(4)
(VFT) No producers found for cons Sym(18)
(VFT) Cons Sym(18) not fused but mirrored to Sym(33) because of fixed shape

(VFT) all vertically fused: 

-- after vertical transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x19 = x4.apply(0)
val x27 = println(x19)
val x28 = println(x19)
val x29 = println(x19)
val x33 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x30 = x4.apply(x1)
val x31 = x30 + x19
x33(x1) = x31
}
val x34 = x33.apply(0)
val x35 = println(x34)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) The candidate Sym(33) cannot be fused with the existing FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(12), Sym(4), Sym(8))) because the candidate set depends on Sym(4)
(HFT) Recording Sym(33), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x19 = x4.apply(0)
val x37 = println(x19)
val x38 = println(x19)
val x39 = println(x19)
val x33 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x30 = x4.apply(x1)
val x31 = x30 + x19
x33(x1) = x31
}
val x34 = x33.apply(0)
val x40 = println(x34)

-- fusion
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x19 = x4.apply(0)
val x37 = println(x19)
val x38 = println(x19)
val x39 = println(x19)
val x33 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x30 = x4.apply(x1)
val x31 = x30 + x19
x33(x1) = x31
}
val x34 = x33.apply(0)
val x40 = println(x34)
-- done
