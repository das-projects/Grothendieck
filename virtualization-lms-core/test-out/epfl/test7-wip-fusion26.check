-- full graph
TP(Sym(2),IntPlus(Const(1),Sym(1)))
TP(Sym(3),OrderingGT(Sym(2),Const(5)))
TP(Sym(4),SingletonInLoop(Sym(2),Sym(1)))
TP(Sym(6),EmptyArrayInLoop(Sym(1),Sym(5)))
TP(Sym(7),IfThenElse(Sym(3),Block(Sym(4)),Block(Sym(6))))
TP(Sym(8),SimpleLoop(Const(10),Sym(1),MultiArrayElem(Block(Sym(7)))))
TP(Sym(9),ArrayLength(Sym(8)))
TP(Sym(11),ArrayIndex(Sym(8),Sym(10)))
TP(Sym(12),IntPlus(Sym(11),Const(2)))
TP(Sym(13),SingletonInLoop(Sym(12),Sym(10)))
TP(Sym(14),SimpleLoop(Sym(9),Sym(10),MultiArrayElem(Block(Sym(13)))))
TP(Sym(15),ArrayIndex(Sym(14),Const(0)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(17),Reify(Sym(16),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(16))))

-- before transformation
val x8_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 10) {
val x2 = 1 + x1
val x3 = x2 > 5
if (x3) {
x8_builder += x2
}
}
val x8 = x8_builder.result()
val x9 = x8.length
val x14 = new Array[Int](x9)
for (x10 <- 0 until x9) {
val x11 = x8.apply(x10)
val x12 = x11 + 2
x14(x10) = x12
}
val x15 = x14.apply(0)
val x16 = println(x15)

-- vertical transformation

(VFT) No producers found for cons Sym(8)

(VFT) Fusing prod Sym(8) with cons Sym(14). Type: Mc_McForRed(Sym(10),Sym(1),Sym(9),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_McFor(Sym(10),(Sym(8),Sym(10)),Sym(2),Sym(13),Sym(4),Sym(14)),Empty_Mc(Sym(19),Sym(6),Sym(14)),Sym(14),Sym(7),Sym(14)),Sym(13),Sym(7),Sym(8),Sym(14))
(VFT) Fused prod Sym(8) with cons Sym(14), fused sym: Sym(23)

(VFT) all vertically fused: List(Sym(23), Sym(8))
List(Sym(7), Sym(22))

-- after vertical transformation
val x23_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 10) {
val x2 = 1 + x1
val x3 = x2 > 5
if (x3) {
val x20 = x2 + 2
x23_builder += x20
}
}
val x23 = x23_builder.result()
val x24 = x23.apply(0)
val x25 = println(x24)

-- horizontal transformation
(HFT) Recording Sym(23), no fusion
  (HFT) Recording if-sym Sym(22), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
val x23_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 10) {
val x2 = 1 + x1
val x3 = x2 > 5
if (x3) {
val x20 = x2 + 2
x23_builder += x20
}
}
val x23 = x23_builder.result()
val x24 = x23.apply(0)
val x27 = println(x24)

-- fusion
val x23_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 10) {
val x2 = 1 + x1
val x3 = x2 > 5
if (x3) {
val x20 = x2 + 2
x23_builder += x20
}
}
val x23 = x23_builder.result()
val x24 = x23.apply(0)
val x27 = println(x24)
-- done
